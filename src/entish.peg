{
  function join(first, rest) {
    console.log(first, rest);
    return {};
  }
  function flatten(arr) {
    return arr.reduce((acc, cur) => acc.concat(Array.isArray(cur) ? flatten(cur) : cur), []);
  }
  function parseNumber(n) {
    return parseFloat(flatten(n).filter(d => d).join(''));
  }
}

statements
  = statement+

statement
  = comment:comment "\n"? { return comment }
  / inference:inference "." { return inference }
  / claim:claim "." { return claim }
  / fact:fact "." { return fact }
  / roll:rolling "." { return roll}
  / query:query "." { return query }
  / __ { return null }

comment
  = "//" comment:[^\n]* { return { type: 'comment', value: comment.join('').trim() } }
  / "/*" comment:(!"*/" .)* "*/" { return { type: 'comment', value: comment.flat().join('').trim() }}

inference
  = left:fact _ ":-" _ right:expr { return { type: 'inference', left, right } }

claim
  = "âˆ´" _ clause:expr { return { type: 'claim', clause: clause } }

fact
  = name:variable "(" args:arguments ")" { return { type: 'fact', table: name.value, fields: args.arguments } }
  / "~" fact:fact { return { ...fact, negative: true } }

rolling
  = "ðŸŽ²" _ clause:expr { return { type: 'rolling', clause: clause } }

query
  = "?" _ query:expr { return { type: 'query', clause: query } }

expr
  = first:term rest:next_expr* { return join(first, rest) }
  / "(" _ first:expr _ ")" rest:next_expr* { return join(first, rest) }

next_expr
  = _ operator:operator _ expr:expr { return [operator, expr] }

term
  = function
  / string
  / variable
  / roll
  / number

function
  = name:([A-Za-z_]+) "(" _ args:arguments _ ")" { return { type: 'function', function: name.value, arguments: args.arguments } }

arguments
  = first:expr rest:nextargs* { return { type: 'arguments', arguments: [first].concat(rest) } }

nextargs
  = _ "," _ expr:expr { return expr }

operator
  = op:("!=" / ">=" / "<=") { return op }
  / op:[=!><&|âŠ•+\-*/] { return op }

string
  = name:([A-Z][A-Za-z_]+) { return { type: 'string', value: name[0] + name[1].join('') } }

variable
  = name:([a-z_]+) { return { type: 'variable', value: name.join('') } }
  / "?" { return { type: 'variable', value: '?' } }

roll
  = count:([0-9]+) "d" die:([0-9]+) modifier:([+-][0-9]+)? { return { type: 'roll', count: parseInt(count.join('')), die: parseInt(die.join('')), modifier: modifier ? parseInt(modifier.join('')) : 0 } }

number
  = number:([-]?[0-9]+([.][0-9]+)?) { return { type: 'number', value: parseNumber(number) } }

_  = [ \t\r\n]*

__ = [ \t\r\n]+