{
  const JUNCTION_OPERATOR = {
    '&': 'conjunction',
    '|': 'disjunction',
    '^': 'exclusive_disjunction',
  };
  const COMPARISON_OPERATORS = ["!=", "<=", ">=", "=", "<", ">"];
  function join(first, rest) {
    return rest.reduce(function(left, curr) {
      const right = curr[2];
      const operator = curr[0];
      if (JUNCTION_OPERATOR[operator] !== undefined) {
        if ((left.type === 'fact' || left.type === 'comparison') && right.type === JUNCTION_OPERATOR[operator]) {
          right.clauses.unshift(left);
          return right;
        }
        return {
          type: JUNCTION_OPERATOR[operator],
          clauses: [left, right],
        };
      }
      if (COMPARISON_OPERATORS.includes(operator)) {
        return {
          type: 'comparison',
          operator,
          left,
          right,
        };
      }
      return {
        type: 'binary_operation',
        operator,
        left,
        right,
      };
    }, first);
  }
  function flatten(arr) {
    return arr.reduce((acc, cur) => acc.concat(Array.isArray(cur) ? flatten(cur) : cur), []);
  }
  function parseNumber(n) {
    return parseFloat(flatten(n).filter(d => d).join(''));
  }
}

statements
  = statement+

statement
  = comment:comment "\n"? { return comment }
  / inference:inference "." { return inference }
  / claim:claim "." { return claim }
  / fn:function "." { return fn }
  / fact:fact "." { return fact }
  / roll:rolling "." { return roll}
  / query:query "." { return query }
  / __ { return null }

comment
  = "//" comment:[^\n]* { return { type: 'comment', value: comment.join('').trim() } }
  / "/*" comment:(!"*/" .)* "*/" { return { type: 'comment', value: comment.flat().join('').trim() }}

inference
  = left:fact _ ":-" _ right:clause { return { type: 'inference', left, right } }

claim
  = "ergo " _ clause:clause { return { type: 'claim', clause: clause } }

rolling
  = "roll " _ clause:clause { return { type: 'rolling', clause: clause } }

query
  = "?" _ query:clause { return { type: 'query', clause: query } }

clause
  = first:comparison _ rest:(op:("&" / "|" / "^") _ clause)+ { return join(first, rest) }
  / comparison

comparison
  = left:additive _ operator:("!=" / "<=" / ">=" / "=" / "<" / ">") _ right:additive { return { type: 'comparison', operator, left, right } }
  / additive

additive
  = first:multiplicative _ rest:(op:("+" / "-") _ multiplicative)+ { return join(first, rest) }
  / multiplicative

multiplicative
  = first:primary _ rest:(op:("*" / "/") _ primary)+ { return join(first, rest) }
  / primary

primary
  = function
  / fact
  / string
  / variable
  / roll
  / number
  / "~(" _ expr:clause _ ")" { expr.negative = true; return expr }
  / "(" _ expr:clause _ ")" { return expr }

fact
  = name:([a-z][a-z_]+) "(" _ args:arguments _ ")" { return { type: 'fact', table: name[0] + name[1].join(''), fields: args.arguments } }
  / "~" fact:fact { return { ...fact, negative: true } }

function
  = fn:builtin_function "(" _ args:arguments _ ")" { return { type: 'function', function: fn, arguments: args.arguments } }

builtin_function
  = "Floor"
  / "Ceil"
  / "Min"
  / "Max"
  / "Sum"
  / "Count"
  / "Load"
  / "Pr"

arguments
  = first:comparison rest:nextargs* { return { type: 'arguments', arguments: [first].concat(rest) } }

nextargs
  = _ "," _ expr:comparison { return expr }

string
  = quoted_string
  / string:([A-Z][A-Za-z_]+) { return { type: 'string', value: string[0] + string[1].join('') } }

quoted_string
  = "\"" string:([^"]+) "\"" { return { type: 'string', value: string.join('') } }

variable
  = name:([a-z_]+) { return { type: 'variable', value: name.join('') } }
  / "?" { return { type: 'variable', value: '?' } }

roll
  = count:([0-9]+) "d" die:([0-9]+) modifier:([+-][0-9]+)? { return { type: 'roll', count: parseInt(count.join('')), die: parseInt(die.join('')), modifier: modifier ? parseInt(modifier.join('')) : 0 } }

number
  = number:([-]?[0-9]+([.][0-9]+)?) { return { type: 'number', value: parseNumber(number) } }

_  = [ \t\r\n]*

__ = [ \t\r\n]+
