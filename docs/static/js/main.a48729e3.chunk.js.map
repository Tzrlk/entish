{"version":3,"sources":["webpack:///./src/App-Container.module.css?18f8","webpack:///./src/App-Navbar.module.css?0aad","webpack:///./src/index.css?cfe4","index.css","App-Container.module.css","App-Navbar.module.css","entmoot.ts","entish.peg","dungeon_world.ent","App.tsx","useMonacoEntish.ts","reportWebVitals.ts","index.tsx"],"names":["api","content","__esModule","default","module","i","options","exports","locals","___CSS_LOADER_EXPORT___","push","grammar","staticGrammar","Entception","Error","groupBy","array","f","groups","forEach","o","group","Object","keys","map","equal","expr1","expr2","type","rollToString","value","Interpreter","parser","tables","inferences","this","peg","generate","trace","statement","loadFact","console","log","factToString","inferenceToString","loadInference","claimToString","testClaim","queryToString","query","input","tracer","Tracer","useColor","statements","parse","filter","x","line","exec","e","error","getBacktraceString","location","start","column","message","fact","negative","table","row","every","col","fields","some","expr","searchInferenceTree","clause","b","facts","flat","inference","recursive","bindings","right","binding","ground","left","field","join","first","aggregate","inf","index","arguments","reduce","n","c","result","evaluateExpression","bind","undefined","rows","clauses","reduceBindings","values","comparisons","length","rest","slice","concat","current","key","newBinding","assign","comparison","compare","clauseToString","constants","unboxedValue","expressionToString","v","fromEntries","operator","claim","JSON","stringify","fn","function","arg","Math","floor","op","pow","evaluateBinaryOperation","evaluateFunction","q","toString","roll","mod","modifier","count","die","Database","Table","monaco","useMonaco","languages","register","id","setMonarchTokensProvider","defaultToken","keywords","brackets","open","close","token","tokenizer","root","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a48729e3.chunk.js","sourcesContent":["var api = require(\"!../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../node_modules/css-loader/dist/cjs.js!./App-Container.module.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../node_modules/css-loader/dist/cjs.js!./App-Navbar.module.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../node_modules/css-loader/dist/cjs.js!./index.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"body {\\n  margin: 0;\\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\\n    sans-serif;\\n  -webkit-font-smoothing: antialiased;\\n  -moz-osx-font-smoothing: grayscale;\\n}\\n\\ncode {\\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\\n    monospace;\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/index.css\"],\"names\":[],\"mappings\":\"AAAA;EACE,SAAS;EACT;;cAEY;EACZ,mCAAmC;EACnC,kCAAkC;AACpC;;AAEA;EACE;aACW;AACb\",\"sourcesContent\":[\"body {\\n  margin: 0;\\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\\n    sans-serif;\\n  -webkit-font-smoothing: antialiased;\\n  -moz-osx-font-smoothing: grayscale;\\n}\\n\\ncode {\\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\\n    monospace;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"._27KvXhK1Cn3xeSy_ERUuYO { /*!*/ }\\n.iCwJ4OetHHYzpK6q4N79Q {\\n\\ndisplay: flex;\\nflex-direction: column;\\nheight: 100vh;\\nwidth: 100vw;\\n}\\n.iCwJ4OetHHYzpK6q4N79Q select {\\npadding: 5px;\\nfont-size: 0.875rem;\\nborder: 0.0625rem solid #375EAB;\\nheight: 30px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9BcHAtQ29udGFpbmVyLm1vZHVsZS5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsUUFBUSxJQUFJLEVBQUU7QUFDZDtBQUNBLGNBQWM7O0FBRWQsYUFBYTtBQUNiLHNCQUFzQjtBQUN0QixhQUFhO0FBQ2IsWUFBWTtBQVFaO0FBTkE7QUFDQSxZQUFZO0FBQ1osbUJBQW1CO0FBQ25CLCtCQUErQjtBQUMvQixZQUFZO0FBQ1oiLCJmaWxlIjoic3JjL0FwcC1Db250YWluZXIubW9kdWxlLmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5jbHMxIHsgLyohKi8gfVxuLmNsczIge1xuY29tcG9zZXM6IGNsczE7XG5cbmRpc3BsYXk6IGZsZXg7XG5mbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuaGVpZ2h0OiAxMDB2aDtcbndpZHRoOiAxMDB2dztcblxuc2VsZWN0IHtcbnBhZGRpbmc6IDVweDtcbmZvbnQtc2l6ZTogMC44NzVyZW07XG5ib3JkZXI6IDAuMDYyNXJlbSBzb2xpZCAjMzc1RUFCO1xuaGVpZ2h0OiAzMHB4O1xufVxufSJdfQ== */\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/src/App-Container.module.css\",\"webpack://./src/App-Container.module.css\"],\"names\":[],\"mappings\":\"AAAA,2BAAQ,IAAI,EAAE;AACd;;AAGA,aAAa;AACb,sBAAsB;AACtB,aAAa;AACb,YAAY;AAQZ;AANA;AACA,YAAY;AACZ,mBAAmB;AACnB,+BAA+B;AAC/B,YAAY;AACZ;ACCA,gtBAAgtB\",\"sourcesContent\":[\".cls1 { /*!*/ }\\n.cls2 {\\ncomposes: cls1;\\n\\ndisplay: flex;\\nflex-direction: column;\\nheight: 100vh;\\nwidth: 100vw;\\n\\nselect {\\npadding: 5px;\\nfont-size: 0.875rem;\\nborder: 0.0625rem solid #375EAB;\\nheight: 30px;\\n}\\n}\",\".cls1 { /*!*/ }\\n.cls2 {\\ncomposes: cls1;\\n\\ndisplay: flex;\\nflex-direction: column;\\nheight: 100vh;\\nwidth: 100vw;\\n}\\n.cls2 select {\\npadding: 5px;\\nfont-size: 0.875rem;\\nborder: 0.0625rem solid #375EAB;\\nheight: 30px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9BcHAtQ29udGFpbmVyLm1vZHVsZS5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsUUFBUSxJQUFJLEVBQUU7QUFDZDtBQUNBLGNBQWM7O0FBRWQsYUFBYTtBQUNiLHNCQUFzQjtBQUN0QixhQUFhO0FBQ2IsWUFBWTtBQVFaO0FBTkE7QUFDQSxZQUFZO0FBQ1osbUJBQW1CO0FBQ25CLCtCQUErQjtBQUMvQixZQUFZO0FBQ1oiLCJmaWxlIjoic3JjL0FwcC1Db250YWluZXIubW9kdWxlLmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5jbHMxIHsgLyohKi8gfVxuLmNsczIge1xuY29tcG9zZXM6IGNsczE7XG5cbmRpc3BsYXk6IGZsZXg7XG5mbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuaGVpZ2h0OiAxMDB2aDtcbndpZHRoOiAxMDB2dztcblxuc2VsZWN0IHtcbnBhZGRpbmc6IDVweDtcbmZvbnQtc2l6ZTogMC44NzVyZW07XG5ib3JkZXI6IDAuMDYyNXJlbSBzb2xpZCAjMzc1RUFCO1xuaGVpZ2h0OiAzMHB4O1xufVxufSJdfQ== */\"],\"sourceRoot\":\"\"}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t\"cls1\": \"_27KvXhK1Cn3xeSy_ERUuYO\",\n\t\"cls2\": \"iCwJ4OetHHYzpK6q4N79Q _27KvXhK1Cn3xeSy_ERUuYO\"\n};\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".WlLYDOQAi_2gHMRjpYz2k { /*!*/ }\\n._2GZvzmSPqaENq77rUojI56 {\\n\\ndisplay: flex;\\nflex-direction: row;\\nalign-items: center;\\npadding: 10px 16px 10px 16px;\\nbackground-color: #E0EBF5;\\n}\\n._2GZvzmSPqaENq77rUojI56 h1 {\\nmargin-right: 16px;\\nfont-size: 20px;\\nfont-family: sans-serif;\\n}\\n._2GZvzmSPqaENq77rUojI56 * {\\nmargin-top: 10px;\\nmargin-bottom: 10px;\\nmargin-right: 12px;\\nborder-radius: 5px;\\nbox-sizing: border-box;\\n}\\n._2GZvzmSPqaENq77rUojI56 button {\\nborder: 1px solid #375EAB;\\nfont-size: 16px;\\nfont-family: sans-serif;\\nbackground: #375EAB;\\ncolor: white;\\nheight: 30px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9BcHAtTmF2YmFyLm1vZHVsZS5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsUUFBUSxJQUFJLEVBQUU7QUFDZDtBQUNBLGNBQWM7O0FBRWQsYUFBYTtBQUNiLG1CQUFtQjtBQUNuQixtQkFBbUI7QUFDbkIsNEJBQTRCO0FBQzVCLHlCQUF5QjtBQXdCekI7QUF0QkE7QUFDQSxrQkFBa0I7QUFDbEIsZUFBZTtBQUNmLHVCQUF1QjtBQUN2QjtBQUVBO0FBQ0EsZ0JBQWdCO0FBQ2hCLG1CQUFtQjtBQUNuQixrQkFBa0I7QUFDbEIsa0JBQWtCO0FBQ2xCLHNCQUFzQjtBQUN0QjtBQUVBO0FBQ0EseUJBQXlCO0FBQ3pCLGVBQWU7QUFDZix1QkFBdUI7QUFDdkIsbUJBQW1CO0FBQ25CLFlBQVk7QUFDWixZQUFZO0FBQ1oiLCJmaWxlIjoic3JjL0FwcC1OYXZiYXIubW9kdWxlLmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5jbHMxIHsgLyohKi8gfVxuLmNsczIge1xuY29tcG9zZXM6IGNsczE7XG5cbmRpc3BsYXk6IGZsZXg7XG5mbGV4LWRpcmVjdGlvbjogcm93O1xuYWxpZ24taXRlbXM6IGNlbnRlcjtcbnBhZGRpbmc6IDEwcHggMTZweCAxMHB4IDE2cHg7XG5iYWNrZ3JvdW5kLWNvbG9yOiAjRTBFQkY1O1xuXG5oMSB7XG5tYXJnaW4tcmlnaHQ6IDE2cHg7XG5mb250LXNpemU6IDIwcHg7XG5mb250LWZhbWlseTogc2Fucy1zZXJpZjtcbn1cblxuKiB7XG5tYXJnaW4tdG9wOiAxMHB4O1xubWFyZ2luLWJvdHRvbTogMTBweDtcbm1hcmdpbi1yaWdodDogMTJweDtcbmJvcmRlci1yYWRpdXM6IDVweDtcbmJveC1zaXppbmc6IGJvcmRlci1ib3g7XG59XG5cbmJ1dHRvbiB7XG5ib3JkZXI6IDFweCBzb2xpZCAjMzc1RUFCO1xuZm9udC1zaXplOiAxNnB4O1xuZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7XG5iYWNrZ3JvdW5kOiAjMzc1RUFCO1xuY29sb3I6IHdoaXRlO1xuaGVpZ2h0OiAzMHB4O1xufVxufSJdfQ== */\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/src/App-Navbar.module.css\",\"webpack://./src/App-Navbar.module.css\"],\"names\":[],\"mappings\":\"AAAA,yBAAQ,IAAI,EAAE;AACd;;AAGA,aAAa;AACb,mBAAmB;AACnB,mBAAmB;AACnB,4BAA4B;AAC5B,yBAAyB;AAwBzB;AAtBA;AACA,kBAAkB;AAClB,eAAe;AACf,uBAAuB;AACvB;AAEA;AACA,gBAAgB;AAChB,mBAAmB;AACnB,kBAAkB;AAClB,kBAAkB;AAClB,sBAAsB;AACtB;AAEA;AACA,yBAAyB;AACzB,eAAe;AACf,uBAAuB;AACvB,mBAAmB;AACnB,YAAY;AACZ,YAAY;AACZ;ACDA,wxCAAwxC\",\"sourcesContent\":[\".cls1 { /*!*/ }\\n.cls2 {\\ncomposes: cls1;\\n\\ndisplay: flex;\\nflex-direction: row;\\nalign-items: center;\\npadding: 10px 16px 10px 16px;\\nbackground-color: #E0EBF5;\\n\\nh1 {\\nmargin-right: 16px;\\nfont-size: 20px;\\nfont-family: sans-serif;\\n}\\n\\n* {\\nmargin-top: 10px;\\nmargin-bottom: 10px;\\nmargin-right: 12px;\\nborder-radius: 5px;\\nbox-sizing: border-box;\\n}\\n\\nbutton {\\nborder: 1px solid #375EAB;\\nfont-size: 16px;\\nfont-family: sans-serif;\\nbackground: #375EAB;\\ncolor: white;\\nheight: 30px;\\n}\\n}\",\".cls1 { /*!*/ }\\n.cls2 {\\ncomposes: cls1;\\n\\ndisplay: flex;\\nflex-direction: row;\\nalign-items: center;\\npadding: 10px 16px 10px 16px;\\nbackground-color: #E0EBF5;\\n}\\n.cls2 h1 {\\nmargin-right: 16px;\\nfont-size: 20px;\\nfont-family: sans-serif;\\n}\\n.cls2 * {\\nmargin-top: 10px;\\nmargin-bottom: 10px;\\nmargin-right: 12px;\\nborder-radius: 5px;\\nbox-sizing: border-box;\\n}\\n.cls2 button {\\nborder: 1px solid #375EAB;\\nfont-size: 16px;\\nfont-family: sans-serif;\\nbackground: #375EAB;\\ncolor: white;\\nheight: 30px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9BcHAtTmF2YmFyLm1vZHVsZS5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsUUFBUSxJQUFJLEVBQUU7QUFDZDtBQUNBLGNBQWM7O0FBRWQsYUFBYTtBQUNiLG1CQUFtQjtBQUNuQixtQkFBbUI7QUFDbkIsNEJBQTRCO0FBQzVCLHlCQUF5QjtBQXdCekI7QUF0QkE7QUFDQSxrQkFBa0I7QUFDbEIsZUFBZTtBQUNmLHVCQUF1QjtBQUN2QjtBQUVBO0FBQ0EsZ0JBQWdCO0FBQ2hCLG1CQUFtQjtBQUNuQixrQkFBa0I7QUFDbEIsa0JBQWtCO0FBQ2xCLHNCQUFzQjtBQUN0QjtBQUVBO0FBQ0EseUJBQXlCO0FBQ3pCLGVBQWU7QUFDZix1QkFBdUI7QUFDdkIsbUJBQW1CO0FBQ25CLFlBQVk7QUFDWixZQUFZO0FBQ1oiLCJmaWxlIjoic3JjL0FwcC1OYXZiYXIubW9kdWxlLmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5jbHMxIHsgLyohKi8gfVxuLmNsczIge1xuY29tcG9zZXM6IGNsczE7XG5cbmRpc3BsYXk6IGZsZXg7XG5mbGV4LWRpcmVjdGlvbjogcm93O1xuYWxpZ24taXRlbXM6IGNlbnRlcjtcbnBhZGRpbmc6IDEwcHggMTZweCAxMHB4IDE2cHg7XG5iYWNrZ3JvdW5kLWNvbG9yOiAjRTBFQkY1O1xuXG5oMSB7XG5tYXJnaW4tcmlnaHQ6IDE2cHg7XG5mb250LXNpemU6IDIwcHg7XG5mb250LWZhbWlseTogc2Fucy1zZXJpZjtcbn1cblxuKiB7XG5tYXJnaW4tdG9wOiAxMHB4O1xubWFyZ2luLWJvdHRvbTogMTBweDtcbm1hcmdpbi1yaWdodDogMTJweDtcbmJvcmRlci1yYWRpdXM6IDVweDtcbmJveC1zaXppbmc6IGJvcmRlci1ib3g7XG59XG5cbmJ1dHRvbiB7XG5ib3JkZXI6IDFweCBzb2xpZCAjMzc1RUFCO1xuZm9udC1zaXplOiAxNnB4O1xuZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7XG5iYWNrZ3JvdW5kOiAjMzc1RUFCO1xuY29sb3I6IHdoaXRlO1xuaGVpZ2h0OiAzMHB4O1xufVxufSJdfQ== */\"],\"sourceRoot\":\"\"}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t\"cls1\": \"WlLYDOQAi_2gHMRjpYz2k\",\n\t\"cls2\": \"_2GZvzmSPqaENq77rUojI56 WlLYDOQAi_2gHMRjpYz2k\"\n};\nexport default ___CSS_LOADER_EXPORT___;\n","import peg from 'pegjs';\nimport Tracer from 'pegjs-backtrace';\nimport staticGrammar from './entish.peg';\n\nlet grammar: string;\nif (staticGrammar === 'entish.peg') {\n  // Just so jest can access non-js resources\n  const fs = require('fs');\n  grammar = fs.readFileSync('./src/entish.peg').toString();\n} else {\n  grammar = staticGrammar;\n}\n\nexport type Statement = Comment | Fact | Inference | Claim | Query\n\nexport type Comment = {\n  type: 'comment'\n  value: string\n}\n\nexport type Fact = {\n  type: 'fact'\n  table: string\n  fields: Expression[]\n  negative?: boolean\n}\n\nexport type Inference = {\n  type: 'inference'\n  left: Fact\n  right: Conjunction | Disjunction\n}\n\nexport type Clause = Fact | Conjunction | Disjunction | Comparison\n\nexport type Conjunction = {\n  type: 'conjunction'\n  clauses: Clause[]\n}\n\nexport type Disjunction = {\n  type: 'disjunction'\n  clauses: Clause[]\n}\n\nexport type Comparison = {\n  type: 'comparison'\n  operator: '=' | '>' | '<' | '>=' | '<=' | '!='\n  left: Expression\n  right: Expression\n}\n\nexport type Claim = {\n  type: 'claim'\n  clause: Clause\n}\n\nexport type Query = {\n  type: 'query'\n  clause: Clause\n}\n\nexport type Expression = Constant | Function | BinaryOperation | Variable | Aggregation\n\nexport type Constant = String | Number | Roll\n\nexport type BinaryOperation = {\n  type: 'binary_operation'\n  left: Expression\n  right: Expression\n  operator: '+' | '-' | '*' | '/' | '^'\n}\n\nexport type Function = {\n  type: 'function'\n  function: 'floor' | 'sum' | 'Pr'\n  arguments: Expression[]\n}\n\nexport type String = {\n  type: 'string'\n  value: string\n}\n\nexport type Variable = {\n  type: 'variable'\n  value: string\n}\n\nexport type Number = {\n  type: 'number'\n  value: number\n}\n\nexport type Roll = {\n  type: 'roll'\n  count: number\n  die: number\n  modifier: number\n}\n\nexport type Aggregation = {\n  type: 'aggregation'\n  function: 'sum'\n  arguments: (string | number | Aggregation)[]\n}\n\nexport type Binding = {\n  facts: Fact[]\n  values: { [key: string]: string | number | Aggregation }\n  comparisons: Comparison[]\n}\n\nexport class Entception extends Error { }\n\nfunction groupBy<T>(array: T[], f: (o: T) => string) {\n  const groups: { [key: string]: T[] } = {};\n  array.forEach(o => {\n    const group = f(o);\n    groups[group] = groups[group] || [];\n    groups[group].push(o);\n  });\n  return Object.keys(groups).map(group => groups[group]);\n}\n\nfunction equal(expr1: Expression, expr2: Expression): boolean {\n  if (expr1.type !== expr2.type) return false;\n  if (expr1.type === 'roll' && expr2.type === 'roll') return rollToString(expr1) === rollToString(expr2);\n  if ('value' in expr1 && 'value' in expr2) return expr1.value === expr2.value;\n  throw new Entception(`incomparable types: ${expr1.type} and ${expr2.type}`);\n}\n\nexport default class Interpreter {\n\n  parser: PEG.Parser;\n  tables: { [key: string]: Constant[][] } = {}\n  inferences: Inference[] = []\n\n  constructor() {\n    this.parser = peg.generate(grammar, { trace: true });\n  }\n\n  exec(statement: Statement) {\n    switch (statement.type) {\n      case 'comment':\n        return;\n      case 'fact':\n        this.loadFact(statement);\n        console.log(`added ${factToString(statement)}`);\n        return;\n      case 'inference':\n        console.log(`inferring ${inferenceToString(statement)}`);\n        this.loadInference(statement);\n        return;\n      case 'claim':\n        console.log(`testing ${claimToString(statement)}`)\n        if (!this.testClaim(statement)) {\n          throw new Entception(`false claim: ${claimToString(statement)}`);\n        } else {\n          console.log(`verified ${claimToString(statement)}`);\n        }\n        return;\n      case 'query':\n        console.log(`query: ${queryToString(statement)}`);\n        this.query(statement).forEach(f => console.log(`found: ${factToString(f)}`));\n        return;\n    }\n  }\n\n  load(input: string) {\n    const tracer = new Tracer(input, { useColor: false });\n    try {\n      const statements = this.parser.parse(input, { tracer: tracer }).filter((x: any) => x);\n      for (let line in statements) {\n        const statement = statements[line];\n        this.exec(statement);\n      }\n    } catch (e) {\n      if ('location' in e) {\n        console.error(tracer.getBacktraceString());\n        throw new Error(`Line ${e.location.start.line} Column ${e.location.start.column}: ${e.message}`);\n      } else {\n        console.error(e);\n        throw e;\n      }\n    }\n  }\n\n  loadFact(fact: Fact) {\n    if (fact.negative) {\n      this.tables[fact.table] = this.tables[fact.table].filter(row => !row.every((col, i) => equal(fact.fields[i], col)));\n      return;\n    }\n    if (!this.tables[fact.table]) {\n      this.tables[fact.table] = [];\n    }\n    if (fact.fields.some(expr => expr.type !== 'string' && expr.type !== 'number' && expr.type !== 'roll')) {\n      throw new Entception(`facts must be grounded with strings or numbers: ${factToString(fact)}`);\n    }\n    if (!this.tables[fact.table].some(e => e.every((f, i) => equal(f, fact.fields[i])))) {\n      this.tables[fact.table].push(fact.fields as Constant[]);\n      this.inferences.forEach(i => this.loadInference(i, true));\n    }\n  }\n\n  query(query: Query): Fact[] {\n    return this.searchInferenceTree(query.clause).map(b => b.facts).flat();\n  }\n\n  loadInference(inference: Inference, recursive: boolean = false) {\n    const bindings = this.searchInferenceTree(inference.right);\n    let facts = bindings.map(binding => this.ground(inference.left, binding));\n    if (facts.some(fact => fact.fields.some(field => field.type === 'aggregation'))) {\n      facts = groupBy(facts, fact => {\n        return fact.fields\n          .filter(f => f.type === 'string' || f.type === 'number')\n          .map(f => (f as String | Number).value)\n          .join('-');\n      }).map(facts => {\n        const first = facts[0];\n        return {\n          type: 'fact',\n          table: first.table,\n          fields: first.fields.map((e, i) => this.aggregate(e, i, facts))\n        };\n      });\n    }\n    facts.forEach(f => this.loadFact(f));\n    if (!recursive && !this.inferences.some(inf => inferenceToString(inf) === inferenceToString(inference))) {\n      this.inferences.push(inference);\n    }\n  }\n\n  aggregate(expr: Expression, index: number, groups: Fact[]): Expression {\n    switch (expr.type) {\n      case 'string':\n      case 'number':\n        return expr;\n      case 'aggregation':\n        const args = groups.map(f => {\n          const field = f.fields[index];\n          if (field.type !== 'aggregation') {\n            throw new Entception(`TODO`);\n          }\n          return field.arguments;\n        });\n        return {\n          type: 'number',\n          value: (args as number[][]).flat().reduce((n, c) => n + c, 0),\n        };\n      default:\n        throw new Entception(`TODO`);\n    }\n  }\n\n  ground(fact: Fact, binding: Binding): Fact {\n    return {\n      type: 'fact',\n      table: fact.table,\n      fields: fact.fields.map(expr => {\n        const result = this.evaluateExpression(expr, binding);\n        switch (typeof (result)) {\n          case 'number':\n            return {\n              type: 'number',\n              value: result,\n            };\n          case 'string':\n            return {\n              type: 'string',\n              value: result,\n            };\n          case 'object':\n            return result;\n          default:\n            throw new Entception(`unknown expression result type ${typeof (result)}`);\n        }\n      }),\n      negative: fact.negative,\n    }\n  }\n\n  searchInferenceTree(clause: Clause): Binding[] {\n    switch (clause.type) {\n      case 'fact':\n        // facts return one binding per matching row of the table\n        return (this.tables[clause.table] || []).map(row => this.bind(row, clause)).filter(b => b !== undefined) as Binding[];\n      case 'conjunction':\n        // conjunction joins bindings into a single binding\n        let rows: Binding[][] = [];\n        this.join(clause.clauses.map(clause => this.searchInferenceTree(clause)), [], rows);\n        return rows.map(bindings => this.reduceBindings(bindings)).filter(b => b !== undefined) as Binding[];\n      case 'disjunction':\n        // disjunction concatenates bindings\n        return clause.clauses.map(clause => this.searchInferenceTree(clause)).flat();\n      case 'comparison':\n        return [{\n          facts: [] as Fact[],\n          values: {},\n          comparisons: [clause],\n        }];\n    }\n  }\n\n  join(bindings: Binding[][], group: Binding[], result: Binding[][]) {\n    if (bindings.length === 0) {\n      result.push(group)\n      return\n    }\n    const first = bindings[0];\n    const rest = bindings.slice(1);\n    for (let binding of first) {\n      this.join(rest, group.concat([binding]), result);\n    }\n  }\n\n  // reduce joins bindings together where same-named variables match\n  // it discards non-matching bindings (i.e. bindings that \"disagree on the facts\")\n  reduceBindings(bindings: Binding[]): Binding | undefined {\n    try {\n      return bindings.reduce((current, binding) => {\n        Object.keys(current.values).forEach(key => {\n          if (binding.values[key] && binding.values[key] !== current.values[key]) {\n            throw new Entception(`bindings disagree: ${binding.values[key]} != ${current.values[key]}`);\n          }\n        });\n        const newBinding = {\n          facts: current.facts.concat(binding.facts),\n          values: Object.assign(current.values, binding.values),\n          comparisons: [],\n        };\n        binding.comparisons.forEach(comparison => {\n          if (!this.compare(comparison, newBinding)) {\n            throw new Entception(`false comparison: ${clauseToString(comparison)}, ${newBinding.values}`);\n          }\n        });\n        return newBinding;\n      }, {\n        facts: [],\n        values: {},\n        comparisons: [],\n      } as Binding);\n    } catch (e) {\n      if (!(e instanceof Entception)) throw e;\n      return undefined;\n    }\n  }\n\n  bind(constants: Constant[], clause: Fact): Binding | undefined {\n    const bindings = constants.map((value, i) => {\n      const field = clause.fields[i];\n      const unboxedValue = value.type === 'roll' ? rollToString(value) : value.value;\n      switch (field.type) {\n        case 'string':\n        case 'number':\n        case 'roll':\n          if (!equal(value, field)) {\n            return false;\n          }\n          return [`${clause.table}[${i}]`, unboxedValue];\n        case 'variable':\n          if (field.value === '?') {\n            return [`${clause.table}[${i}]`, unboxedValue];\n          }\n          return [field.value, unboxedValue];\n        default:\n          throw new Entception(`can't handle ${field.type} ${expressionToString(field)} in clause`);\n      }\n    });\n    if (bindings.some(v => !v)) return undefined;\n    return {\n      facts: [{\n        type: 'fact',\n        table: clause.table,\n        fields: constants,\n      }],\n      values: Object.fromEntries(bindings as Iterable<readonly [PropertyKey, string | number]>),\n      comparisons: [],\n    };\n  }\n\n  compare(comparison: Comparison, binding: Binding): boolean {\n    const left = this.evaluateExpression(comparison.left, binding);\n    const right = this.evaluateExpression(comparison.right, binding);\n    if (left instanceof Object || right instanceof Object) {\n      throw new Error(\"can't compare aggregations\"); // TODO\n    }\n    switch (comparison.operator) {\n      case '=':\n        return left === right;\n      case '!=':\n        return left !== right;\n      case '>':\n        return left > right;\n      case '>=':\n        return left >= right;\n      case '<':\n        return left < right;\n      case '<=':\n        return left <= right;\n    }\n  }\n\n  testClaim(claim: Claim): boolean {\n    if (claim.clause.type === 'fact') {\n      const table = this.tables[claim.clause.table];\n      if (table) {\n        for (const row of table) {\n          if (row.length !== claim.clause.fields.length) continue;\n          if (claim.clause.fields.every((field, i) => field.type === row[i].type && JSON.stringify(field) === JSON.stringify(row[i]))) { return !claim.clause.negative }\n        }\n      }\n      return !!claim.clause.negative;\n    }\n    throw new Entception(`Can't verify claims of type ${claim.clause.type}`);\n  }\n\n  evaluateFunction(fn: Function, binding: Binding): string | number | Aggregation {\n    switch (fn.function) {\n      case 'floor':\n        const arg = this.evaluateExpression(fn.arguments[0], binding);\n        if (typeof (arg) !== 'number') {\n          throw new Entception(`floor requires numeric argument, got ${arg}`);\n        }\n        return Math.floor(arg);\n      case 'sum':\n        return {\n          type: 'aggregation',\n          function: 'sum',\n          arguments: fn.arguments.map(expr => this.evaluateExpression(expr, binding)),\n        };\n      default:\n        throw new Entception(`can't handle function ${fn.function}`)\n    }\n  }\n\n  evaluateBinaryOperation(op: BinaryOperation, binding: Binding): number {\n    const left = this.evaluateExpression(op.left, binding);\n    if (typeof (left) !== 'number') {\n      throw new Entception(`binary operation requires number on left-hand side, got ${left}`);\n    }\n    const right = this.evaluateExpression(op.right, binding);\n    if (typeof (right) !== 'number') {\n      throw new Entception(`binary operation requires number on right-hand side, got ${right}`);\n    }\n    switch (op.operator) {\n      case '+':\n        return left + right;\n      case '-':\n        return left - right;\n      case '/':\n        return left / right;\n      case '*':\n        return left * right;\n      case '^':\n        return Math.pow(left, right);\n    }\n  }\n\n  evaluateExpression(expr: Expression, binding: Binding): string | number | Aggregation {\n    switch (expr.type) {\n      case 'binary_operation':\n        return this.evaluateBinaryOperation(expr, binding);\n      case 'function':\n        return this.evaluateFunction(expr, binding);\n      case 'variable':\n        return binding.values[expr.value];\n      case 'string':\n      case 'number':\n        return expr.value;\n      case 'roll':\n        return rollToString(expr);\n      case 'aggregation':\n        return expr;\n    }\n  }\n}\n\nexport function statementToString(stmt: Statement): string {\n  switch (stmt.type) {\n    case 'claim':\n      return claimToString(stmt);\n    case 'inference':\n      return inferenceToString(stmt);\n    case 'query':\n      return queryToString(stmt);\n    default:\n      return `[${stmt.type}]`;\n  }\n}\n\nexport function inferenceToString(inf: Inference): string {\n  return `${factToString(inf.left)} :- ${clauseToString(inf.right)}.`\n}\n\nexport function queryToString(q: Query): string {\n  return `${clauseToString(q.clause)}?`;\n}\n\nexport function factToString(fact: Fact): string {\n  return `${fact.negative ? '~' : ''}${fact.table}(${fact.fields.map(e => expressionToString(e)).join(', ')})`;\n}\n\nexport function clauseToString(clause: Clause): string {\n  switch (clause.type) {\n    case 'fact':\n      return factToString(clause);\n    case 'conjunction':\n      return '(' + clause.clauses.map(c => clauseToString(c)).join(' & ') + ')';\n    case 'disjunction':\n      return '(' + clause.clauses.map(c => clauseToString(c)).join(' | ') + ')';\n    case 'comparison':\n      return `${expressionToString(clause.left)} ${clause.operator} ${expressionToString(clause.right)}`;\n  }\n}\n\nexport function expressionToString(expr: Expression): string {\n  switch (expr.type) {\n    case 'string':\n      return expr.value;\n    case 'number':\n      return expr.value.toString();\n    case 'roll':\n      return rollToString(expr);\n    case 'variable':\n      return expr.value;\n    case 'binary_operation':\n      return `${expressionToString(expr.left)} ${expr.operator} ${expressionToString(expr.right)}`;\n    case 'function':\n      return `${expr.function}(${expr.arguments.map(e => expressionToString(e)).join(', ')})`;\n    case 'aggregation':\n      return `${expr.function}(${expr.arguments.map(e => {\n        if (typeof (e) === 'object') return expressionToString(e);\n        return e;\n      }).join(', ')})`;\n  }\n}\n\nexport function rollToString(roll: Roll): string {\n  const mod = roll.modifier > 0 ? `+${roll.modifier}` : roll.modifier < 0 ? `-${roll.modifier}` : '';\n  return `${roll.count}d${roll.die}${mod}`;\n}\n\nexport function claimToString(claim: Claim): string {\n  return `∴ ${clauseToString(claim.clause)}`;\n}\n","export default \"{\\n  function joinClauses(type, first, rest) {\\n    if (first.type === 'fact' && rest.length === 1 && (rest[0].type === 'conjunction' || rest[0].type === 'disjunction')) {\\n      rest[0].clauses.unshift(first);\\n      return rest[0];\\n    }\\n    return {\\n      type: type,\\n      clauses: [first].concat(rest),\\n    };\\n  }\\n  function parseNumber(n) {\\n    return parseFloat(n.flat().filter(d => d).join(''));\\n  }\\n}\\n\\nstatements\\n  = statement+\\n\\nstatement\\n  = comment:comment \\\"\\\\n\\\"? { return comment }\\n  / inference:inference \\\".\\\" { return inference }\\n  / claim:claim \\\".\\\" { return claim }\\n  / fact:fact \\\".\\\" { return fact }\\n  / \\\"?\\\" query:clause \\\".\\\" { return { type: 'query', clause: query } }\\n  / [ \\\\t\\\\r\\\\n]+ { return null }\\n\\nfact\\n  = whitespace name:variable \\\"(\\\" args:arguments \\\")\\\" whitespace { return { type: 'fact', table: name.value, fields: args.arguments } }\\n  / whitespace \\\"~\\\" fact:fact { return { ...fact, negative: true } }\\n\\nexpr\\n  = addition\\n  / multiplication \\n  / probability\\n  / function\\n  / \\\"(\\\" comparison \\\")\\\"\\n  / variable\\n  / roll\\n  / string \\n  / number\\n\\nterm\\n  = multiplication\\n  / factor\\n\\nfactor\\n  = parenthetical_expr\\n  / function\\n  / variable\\n  / number \\n\\naddition\\n  = left:term whitespace operator:([+\\\\-]) whitespace right:expr { return { type: 'binary_operation', operator, left, right } }\\n\\nmultiplication\\n  = left:factor whitespace operator:([*/]) whitespace right:expr { return { type: 'binary_operation', operator, left, right } }\\n\\nparenthetical_expr\\n  = \\\"(\\\" \\\" \\\"* expr:expr \\\" \\\"* \\\")\\\" { return expr }\\n\\nfunction\\n  = name:variable \\\"(\\\" args:arguments \\\")\\\" { return { type: 'function', function: name.value, arguments: args.arguments } }\\n\\narguments\\n  = whitespace first:expr rest:nextargs* whitespace { return { type: 'arguments', arguments: [first].concat(rest) } }\\n\\nnextargs\\n  = \\\",\\\" whitespace expr:expr { return expr }\\n\\nprobability\\n  = \\\"Pr(\\\" arg:variable \\\")\\\" { return { type: 'function', function: 'probability', arguments: [arg] } }\\n  / \\\"Pr(\\\" arg:roll \\\")\\\" { return { type: 'function', function: 'probability', arguments: [arg] } }\\n\\ninference\\n  = left:fact \\\":-\\\" whitespace right:clause { return { type: 'inference', left, right } }\\n\\nclause\\n  = conjunction\\n  / disjunction\\n  / \\\"(\\\" whitespace clause:clause whitespace \\\")\\\" { return clause }\\n  / fact\\n  / comparison\\n\\nconjunction\\n  = \\\"(\\\" first:clause \\\")\\\" whitespace rest:next_conjunction+ { return joinClauses('conjunction', first, rest) }\\n  / first:fact rest:next_conjunction+ { return joinClauses('conjunction', first, rest) }\\n\\ndisjunction\\n  = \\\"(\\\" first:fact \\\")\\\" whitespace rest:next_disjunction+ { return joinClauses('disjunction', first, rest) }\\n  / first:fact rest:next_disjunction+ { return joinClauses('disjunction', first, rest) }\\n\\nnext_conjunction\\n  = \\\"&\\\" whitespace clause:clause { return clause }\\n\\nnext_disjunction\\n  = \\\"|\\\" whitespace clause:clause { return clause }\\n\\nclaim\\n  = \\\"∴\\\" clause:clause { return { type: 'claim', clause: clause } }\\n\\ncomparison\\n  = whitespace left:expr whitespace operator:comparison_operator whitespace right:expr whitespace { return { type: 'comparison', operator, left, right }}\\n\\ncomparison_operator\\n  = op:\\\"=\\\" { return op }\\n  / op:\\\"!=\\\" { return op }\\n  / op:\\\">=\\\" { return op }\\n  / op:\\\"<=\\\" { return op }\\n  / op:\\\">\\\" { return op }\\n  / op:\\\"<\\\" { return op }\\n\\ncomment\\n  = \\\"//\\\" comment:[^\\\\n]* { return { type: 'comment', value: comment.join('').trim() } }\\n  / \\\"/*\\\" comment:(!\\\"*/\\\" .)* \\\"*/\\\" { return { type: 'comment', value: comment.flat().join('').trim() }}\\n\\nstring\\n  = name:([A-Z][A-Za-z_]+) { return { type: 'string', value: name[0] + name[1].join('') } }\\n\\nvariable\\n  = name:([a-z_]+) { return { type: 'variable', value: name.join('') } }\\n  / \\\"?\\\" { return { type: 'variable', value: '?' } }\\n\\nroll\\n  = count:([0-9]+) \\\"d\\\" die:([0-9]+) modifier:([+-][0-9]+)? { return { type: 'roll', count: parseInt(count), die: parseInt(die), modifier: parseInt(modifier || '0') } }\\n\\nnumber\\n  = number:([-]?[0-9]+([.][0-9]+)?) { return { type: 'number', value: parseNumber(number) } }\\n\\nwhitespace\\n  = [ \\\\t\\\\r\\\\n]*\\n\";","export default \"// Auric has the Barbarian class\\nclass(Auric, Barbarian).\\n\\n// Auric has a Strength of 16\\nattribute(Auric, Strength, 16).\\n\\n// Auric has a Wisdom of 16\\nattribute(Auric, Wisdom, 9).\\n\\n// A character's bonus is half their attribute score minus ten\\nbonus(character, attr, floor((score-10)/2)) :- attribute(character, attr, score).\\n\\n// Therefore, Auric has a Strength bonus of 3\\n∴ bonus(Auric, Strength, 3).\\n\\n// Therefore, Auric has a Wisdom bonus of -1\\n∴ bonus(Auric, Wisdom, -1).\\n\\n// Full Plate has an armor bonus of 3\\narmor(FullPlate, 3).\\n\\n// Full Plate has a weight of 4\\nweight(FullPlate, 4).\\n\\n// Full Plate has the clumsy tag\\ntag(FullPlate, Clumsy).\\n\\n// A small shield\\nweight(RoundShield, 1).\\narmor(RoundShield, 1).\\n\\n// And a sword\\nweight(TwoHandedSword, 2).\\ndamage(TwoHandedSword, 1d8).\\ntag(TwoHandedSword, Close).\\n\\n// Given gear has a tag and the character is wearing the gear, add the tag to the character\\ntag(character, tag) :- (wearing(character, gear) | wielding(character, gear)) & tag(gear, tag).\\n\\n// Given a character, their armor is the sum of the armor of gear they are wearing/wielding\\narmor(character, sum(armor)) :- (wearing(character, gear) | wielding(character, gear)) & armor(gear, armor).\\n\\n// Given a character, their load is the sum of the weights of gear they are wearing and wielding\\nload(character, sum(weight)) :- (wearing(character, gear) | wielding(character, gear)) & weight(gear, weight).\\n\\n// The max load of a Barbarian is 8 plus their strength bonus\\nmax_load(character, 8+str) :- class(character, Barbarian) & bonus(character, Strength, str).\\n\\n// Give Auric his gear\\nwearing(Auric, FullPlate).\\nwielding(Auric, RoundShield).\\nwielding(Auric, TwoHandedSword).\\n\\n// So Auric is Clumsy, but he's got 4 armor a load of 7, and a max load of 11\\n∴ tag(Auric, Clumsy).\\n∴ armor(Auric, 4).\\n∴ load(Auric, 7).\\n∴ max_load(Auric, 11).\\n\\n? wielding(Auric, ?) | wearing(Auric, ?).\\n\\n// The move \\\"Full Plate and Packing Steel\\\" negates the Clumsy tag\\n~tag(character, Clumsy) :- move(character, FullPlateAndPackingSteel).\\n\\n// Auric has the move \\\"Full Plate and Packing Steel\\\"\\nmove(Auric, FullPlateAndPackingSteel).\\n\\n// Auric is not Clumsy\\n∴ ~tag(Auric, Clumsy).\\n\\nattack(Barbarian, 1d20+2).\\n\\n// TODO: Working on rolls and probability math\\n// ∴ attack(Barbarian, roll) & Pr(roll) >= 15 = 0.400.\\n\";","import React, { useRef, useState } from 'react';\nimport styled from 'astroturf/react';\nimport Editor from \"@monaco-editor/react\";\n\nimport Interpreter, { Constant, expressionToString } from './entmoot';\nimport useMonacoEntish from './useMonacoEntish';\nimport dungeon_world from './dungeon_world.ent';\n\nconst Container = styled(\"div\")`\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n  width: 100vw;\n\n  select {\n    padding: 5px;\n    font-size: 0.875rem;\n    border: 0.0625rem solid #375EAB;\n    height: 30px;\n  }\n`;\n\nconst Navbar = styled(\"div\")`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  padding: 10px 16px 10px 16px;\n  background-color: #E0EBF5;\n\n  h1 {\n    margin-right: 16px;\n    font-size: 20px;\n    font-family: sans-serif;\n  }\n\n  * {\n    margin-top: 10px;\n    margin-bottom: 10px;\n    margin-right: 12px;\n    border-radius: 5px;\n    box-sizing: border-box;\n  }\n\n  button {\n    border: 1px solid #375EAB;\n    font-size: 16px;\n    font-family: sans-serif;\n    background: #375EAB;\n    color: white;\n    height: 30px;\n  }\n`;\n\nfunction Database({ interpreter }: { interpreter: Interpreter }) {\n  const [selectedTableName, setSelectedTableName] = useState<string | undefined>(undefined);\n  return <div style={{ margin: \"16px 24px\" }}>\n    {Object.keys(interpreter.tables).length > 0 &&\n      <select onChange={event => { setSelectedTableName(event.target.value) }}>\n        {Object.keys(interpreter.tables).map(table_name => <option\n          key={table_name} value={table_name}>\n          {table_name}\n        </option>)}\n      </select>\n    }\n    {selectedTableName &&\n      <Table name={selectedTableName} rows={interpreter.tables[selectedTableName]} />\n    }\n  </div >;\n}\n\nfunction Table({ name, rows }: { name: string, rows: Constant[][] }) {\n  return <table>\n    <tbody>\n      {rows.map((row, i) => <tr key={`${name}-${i}`}>\n        {row.map((val, j) => <td key={`${name}-${i}-${j}`}>\n          {expressionToString(val)}\n        </td>)}\n      </tr>)}\n    </tbody>\n  </table>;\n}\n\nfunction App() {\n  useMonacoEntish();\n  const examples: { [key: string]: string } = {\n    dungeon_world: dungeon_world,\n    clear: '',\n  };\n  const [interpreter, setInterpreter] = useState<Interpreter>(new Interpreter());\n  const [code, setCode] = useState<string>(examples.dungeon_world);\n  const [error, setError] = useState<string | undefined>(undefined);\n  const [log, setLog] = useState<string[]>([]);\n  const editorRef = useRef<any>(null);\n  const onExampleChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const example = examples[event.target.value];\n    setCode(example);\n    editorRef.current?.getModel().setValue(example);\n    setInterpreter(new Interpreter());\n  }\n  const run = () => {\n    const tmp = (console as any).log;\n    const newLog: string[] = [];\n    (console as any).log = (msg: string) => {\n      newLog.push(msg);\n    }\n    try {\n      interpreter.load(code);\n      setError(undefined);\n    } catch (e) {\n      setError(e.message);\n    }\n    (console as any).log = tmp;\n    setLog(newLog);\n    setInterpreter(interpreter);\n  }\n  return <Container>\n    <Navbar>\n      <h1>Entish Playground</h1>\n      <button onClick={run}>Run</button>\n      <select onChange={onExampleChange} defaultValue={\"dungeon_world\"}>\n        <option value=\"clear\">Clear</option>\n        <option value=\"dungeon_world\">Dungeon World</option>\n      </select>\n      <a href=\"//github.com/etherealmachine/entish#readme\">README</a>\n      <div style={{ marginLeft: \"auto\" }}>\n        <span><a href=\"//github.com/etherealmachine\">James Pettit</a> ©2021</span>\n      </div>\n    </Navbar>\n    <div style={{ height: \"calc(100vh - 70px)\" }}>\n      <div style={{ height: \"60%\" }}>\n        <Editor\n          defaultLanguage=\"entish\"\n          defaultValue={code}\n          onChange={value => { if (value) setCode(value) }}\n          options={{ minimap: { enabled: false }, scrollBeyondLastLine: false, scrollbar: { alwaysConsumeMouseWheel: false } }}\n          onMount={editor => { editorRef.current = editor; editor.layout(); }}\n        />\n      </div>\n      <div style={{ height: \"40%\", display: \"flex\", justifyContent: \"flex-start\" }}>\n        <div style={{ height: \"100%\", overflow: \"scroll\" }}>\n          <p style={{ color: \"#900\" }}>{error}</p>\n          <div>\n            {log.map((msg, i) => <p key={`log-msg-${i}`}>{msg}</p>)}\n          </div>\n        </div>\n        <Database interpreter={interpreter} />\n      </div>\n    </div>\n  </Container>;\n}\n\nexport default App;\n","import { useMonaco } from \"@monaco-editor/react\";\n\nexport default function useMonacoEntish() {\n\tconst monaco = useMonaco();\n\tif (monaco) {\n\t\tmonaco.languages.register({ id: 'entish' });\n\n\t\t// Register a tokens provider for the language\n\t\tmonaco.languages.setMonarchTokensProvider('entish', {\n\t\t\tdefaultToken: 'invalid',\n\t\t\tkeywords: [],\n\t\t\tbrackets: [\n\t\t\t\t{ open: '(', close: ')', token: 'delimiter.parenthesis' }\n\t\t\t],\n\t\t\ttokenizer: {\n\t\t\t\troot: [\n\t\t\t\t\t[/∴|:-|\\.|^\\?/, 'keyword'],\n\t\t\t\t\t[/\\/\\/.*$/, 'comment'],\n\t\t\t\t\t[/[A-Z][a-z]*/, 'constant'],\n\t\t\t\t\t[/[0-9]+d[0-9]+([+-][0-9]+)?/, 'constant'],\n\t\t\t\t\t[/\\d+/, 'number'],\n\t\t\t\t\t[/[()]/, '@brackets'],\n\t\t\t\t\t[/([a-z_]+)\\(/, 'identifier'],\n\t\t\t\t\t[/[a-z_]+|\\?/, 'variable.name'],\n\t\t\t\t\t[/[,]/, 'delimiter'],\n\t\t\t\t\t[/~|=|>|<|!=|>=|<=|\\*|\\/|\\+|-|\\^|&|\\|/, 'operators'],\n\t\t\t\t\t[/[ \\t\\r\\n]+/, ''],\n\t\t\t\t],\n\t\t\t},\n\t\t});\n\t}\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}