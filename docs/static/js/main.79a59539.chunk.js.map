{"version":3,"sources":["webpack:///./src/App-Container.module.css?18f8","webpack:///./src/App-Navbar.module.css?0aad","webpack:///./src/index.css?cfe4","index.css","App-Container.module.css","App-Navbar.module.css","entmoot.ts","entish.peg","dungeon_world.ent","App.tsx","useMonacoEntish.ts","reportWebVitals.ts","index.tsx"],"names":["api","content","__esModule","default","module","i","options","exports","locals","___CSS_LOADER_EXPORT___","push","grammar","staticGrammar","Entception","Error","BindingMismatch","TODO","groupBy","array","f","groups","forEach","o","group","Object","keys","map","equal","expr1","expr2","type","rollToString","value","Interpreter","seed","parser","tables","inferences","rng","this","peg","generate","trace","seedrandom","statement","results","loadFact","console","log","factToString","inferenceToString","loadInference","claimToString","testClaim","queryToString","query","length","warn","clauseToString","clause","roll","input","tracer","Tracer","useColor","statements","parse","filter","x","line","exec","e","error","getBacktraceString","location","start","column","message","fact","negative","table","row","every","col","fields","some","expr","search","b","facts","flat","newFacts","generateRoll","inference","recursive","bindings","right","binding","ground","left","field","join","first","aggregate","inf","index","function","arguments","reduce","n","c","result","evaluateExpression","bind","undefined","rows","clauses","reduceBindings","values","comparisons","rest","slice","concat","current","key","expressionToString","newBinding","assign","comparison","compare","constants","fromEntries","l","averageRoll","r","operator","op","target","outcomes","positive_outcomes","count","j","die","modifier","total","Math","floor","claim","JSON","stringify","fn","arg","probability","pow","evaluateBinaryOperation","evaluateFunction","q","comparisonToString","toString","mod","Database","Table","monaco","useMonaco","languages","register","id","setMonarchTokensProvider","defaultToken","keywords","brackets","open","close","token","tokenizer","root","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.79a59539.chunk.js","sourcesContent":["var api = require(\"!../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../node_modules/css-loader/dist/cjs.js!./App-Container.module.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../node_modules/css-loader/dist/cjs.js!./App-Navbar.module.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../node_modules/css-loader/dist/cjs.js!./index.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"body {\\r\\n  margin: 0;\\r\\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\\r\\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\\r\\n    sans-serif;\\r\\n  -webkit-font-smoothing: antialiased;\\r\\n  -moz-osx-font-smoothing: grayscale;\\r\\n}\\r\\n\\r\\ncode {\\r\\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\\r\\n    monospace;\\r\\n}\\r\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/index.css\"],\"names\":[],\"mappings\":\"AAAA;EACE,SAAS;EACT;;cAEY;EACZ,mCAAmC;EACnC,kCAAkC;AACpC;;AAEA;EACE;aACW;AACb\",\"sourcesContent\":[\"body {\\r\\n  margin: 0;\\r\\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\\r\\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\\r\\n    sans-serif;\\r\\n  -webkit-font-smoothing: antialiased;\\r\\n  -moz-osx-font-smoothing: grayscale;\\r\\n}\\r\\n\\r\\ncode {\\r\\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\\r\\n    monospace;\\r\\n}\\r\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"._27KvXhK1Cn3xeSy_ERUuYO { /*!*/ }\\n.iCwJ4OetHHYzpK6q4N79Q {\\n\\ndisplay: flex;\\nflex-direction: column;\\nheight: 100vh;\\nwidth: 100vw;\\n}\\n.iCwJ4OetHHYzpK6q4N79Q select {\\npadding: 5px;\\nfont-size: 0.875rem;\\nborder: 0.0625rem solid #375EAB;\\nheight: 30px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9BcHAtQ29udGFpbmVyLm1vZHVsZS5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsUUFBUSxJQUFJLEVBQUU7QUFDZDtBQUNBLGNBQWM7O0FBRWQsYUFBYTtBQUNiLHNCQUFzQjtBQUN0QixhQUFhO0FBQ2IsWUFBWTtBQVFaO0FBTkE7QUFDQSxZQUFZO0FBQ1osbUJBQW1CO0FBQ25CLCtCQUErQjtBQUMvQixZQUFZO0FBQ1oiLCJmaWxlIjoic3JjXFxBcHAtQ29udGFpbmVyLm1vZHVsZS5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuY2xzMSB7IC8qISovIH1cbi5jbHMyIHtcbmNvbXBvc2VzOiBjbHMxO1xuXG5kaXNwbGF5OiBmbGV4O1xuZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbmhlaWdodDogMTAwdmg7XG53aWR0aDogMTAwdnc7XG5cbnNlbGVjdCB7XG5wYWRkaW5nOiA1cHg7XG5mb250LXNpemU6IDAuODc1cmVtO1xuYm9yZGVyOiAwLjA2MjVyZW0gc29saWQgIzM3NUVBQjtcbmhlaWdodDogMzBweDtcbn1cbn0iXX0= */\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/src/App-Container.module.css\",\"webpack://./src/App-Container.module.css\"],\"names\":[],\"mappings\":\"AAAA,2BAAQ,IAAI,EAAE;AACd;;AAGA,aAAa;AACb,sBAAsB;AACtB,aAAa;AACb,YAAY;AAQZ;AANA;AACA,YAAY;AACZ,mBAAmB;AACnB,+BAA+B;AAC/B,YAAY;AACZ;ACCA,gtBAAgtB\",\"sourcesContent\":[\".cls1 { /*!*/ }\\n.cls2 {\\ncomposes: cls1;\\n\\ndisplay: flex;\\nflex-direction: column;\\nheight: 100vh;\\nwidth: 100vw;\\n\\nselect {\\npadding: 5px;\\nfont-size: 0.875rem;\\nborder: 0.0625rem solid #375EAB;\\nheight: 30px;\\n}\\n}\",\".cls1 { /*!*/ }\\n.cls2 {\\ncomposes: cls1;\\n\\ndisplay: flex;\\nflex-direction: column;\\nheight: 100vh;\\nwidth: 100vw;\\n}\\n.cls2 select {\\npadding: 5px;\\nfont-size: 0.875rem;\\nborder: 0.0625rem solid #375EAB;\\nheight: 30px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9BcHAtQ29udGFpbmVyLm1vZHVsZS5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsUUFBUSxJQUFJLEVBQUU7QUFDZDtBQUNBLGNBQWM7O0FBRWQsYUFBYTtBQUNiLHNCQUFzQjtBQUN0QixhQUFhO0FBQ2IsWUFBWTtBQVFaO0FBTkE7QUFDQSxZQUFZO0FBQ1osbUJBQW1CO0FBQ25CLCtCQUErQjtBQUMvQixZQUFZO0FBQ1oiLCJmaWxlIjoic3JjXFxBcHAtQ29udGFpbmVyLm1vZHVsZS5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuY2xzMSB7IC8qISovIH1cbi5jbHMyIHtcbmNvbXBvc2VzOiBjbHMxO1xuXG5kaXNwbGF5OiBmbGV4O1xuZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbmhlaWdodDogMTAwdmg7XG53aWR0aDogMTAwdnc7XG5cbnNlbGVjdCB7XG5wYWRkaW5nOiA1cHg7XG5mb250LXNpemU6IDAuODc1cmVtO1xuYm9yZGVyOiAwLjA2MjVyZW0gc29saWQgIzM3NUVBQjtcbmhlaWdodDogMzBweDtcbn1cbn0iXX0= */\"],\"sourceRoot\":\"\"}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t\"cls1\": \"_27KvXhK1Cn3xeSy_ERUuYO\",\n\t\"cls2\": \"iCwJ4OetHHYzpK6q4N79Q _27KvXhK1Cn3xeSy_ERUuYO\"\n};\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".WlLYDOQAi_2gHMRjpYz2k { /*!*/ }\\n._2GZvzmSPqaENq77rUojI56 {\\n\\ndisplay: flex;\\nflex-direction: row;\\nalign-items: center;\\npadding: 10px 16px 10px 16px;\\nbackground-color: #E0EBF5;\\n}\\n._2GZvzmSPqaENq77rUojI56 h1 {\\nmargin-right: 16px;\\nfont-size: 20px;\\nfont-family: sans-serif;\\n}\\n._2GZvzmSPqaENq77rUojI56 * {\\nmargin-top: 10px;\\nmargin-bottom: 10px;\\nmargin-right: 12px;\\nborder-radius: 5px;\\nbox-sizing: border-box;\\n}\\n._2GZvzmSPqaENq77rUojI56 button {\\nborder: 1px solid #375EAB;\\nfont-size: 16px;\\nfont-family: sans-serif;\\nbackground: #375EAB;\\ncolor: white;\\nheight: 30px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9BcHAtTmF2YmFyLm1vZHVsZS5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsUUFBUSxJQUFJLEVBQUU7QUFDZDtBQUNBLGNBQWM7O0FBRWQsYUFBYTtBQUNiLG1CQUFtQjtBQUNuQixtQkFBbUI7QUFDbkIsNEJBQTRCO0FBQzVCLHlCQUF5QjtBQXdCekI7QUF0QkE7QUFDQSxrQkFBa0I7QUFDbEIsZUFBZTtBQUNmLHVCQUF1QjtBQUN2QjtBQUVBO0FBQ0EsZ0JBQWdCO0FBQ2hCLG1CQUFtQjtBQUNuQixrQkFBa0I7QUFDbEIsa0JBQWtCO0FBQ2xCLHNCQUFzQjtBQUN0QjtBQUVBO0FBQ0EseUJBQXlCO0FBQ3pCLGVBQWU7QUFDZix1QkFBdUI7QUFDdkIsbUJBQW1CO0FBQ25CLFlBQVk7QUFDWixZQUFZO0FBQ1oiLCJmaWxlIjoic3JjXFxBcHAtTmF2YmFyLm1vZHVsZS5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuY2xzMSB7IC8qISovIH1cbi5jbHMyIHtcbmNvbXBvc2VzOiBjbHMxO1xuXG5kaXNwbGF5OiBmbGV4O1xuZmxleC1kaXJlY3Rpb246IHJvdztcbmFsaWduLWl0ZW1zOiBjZW50ZXI7XG5wYWRkaW5nOiAxMHB4IDE2cHggMTBweCAxNnB4O1xuYmFja2dyb3VuZC1jb2xvcjogI0UwRUJGNTtcblxuaDEge1xubWFyZ2luLXJpZ2h0OiAxNnB4O1xuZm9udC1zaXplOiAyMHB4O1xuZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7XG59XG5cbioge1xubWFyZ2luLXRvcDogMTBweDtcbm1hcmdpbi1ib3R0b206IDEwcHg7XG5tYXJnaW4tcmlnaHQ6IDEycHg7XG5ib3JkZXItcmFkaXVzOiA1cHg7XG5ib3gtc2l6aW5nOiBib3JkZXItYm94O1xufVxuXG5idXR0b24ge1xuYm9yZGVyOiAxcHggc29saWQgIzM3NUVBQjtcbmZvbnQtc2l6ZTogMTZweDtcbmZvbnQtZmFtaWx5OiBzYW5zLXNlcmlmO1xuYmFja2dyb3VuZDogIzM3NUVBQjtcbmNvbG9yOiB3aGl0ZTtcbmhlaWdodDogMzBweDtcbn1cbn0iXX0= */\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/src/App-Navbar.module.css\",\"webpack://./src/App-Navbar.module.css\"],\"names\":[],\"mappings\":\"AAAA,yBAAQ,IAAI,EAAE;AACd;;AAGA,aAAa;AACb,mBAAmB;AACnB,mBAAmB;AACnB,4BAA4B;AAC5B,yBAAyB;AAwBzB;AAtBA;AACA,kBAAkB;AAClB,eAAe;AACf,uBAAuB;AACvB;AAEA;AACA,gBAAgB;AAChB,mBAAmB;AACnB,kBAAkB;AAClB,kBAAkB;AAClB,sBAAsB;AACtB;AAEA;AACA,yBAAyB;AACzB,eAAe;AACf,uBAAuB;AACvB,mBAAmB;AACnB,YAAY;AACZ,YAAY;AACZ;ACDA,wxCAAwxC\",\"sourcesContent\":[\".cls1 { /*!*/ }\\n.cls2 {\\ncomposes: cls1;\\n\\ndisplay: flex;\\nflex-direction: row;\\nalign-items: center;\\npadding: 10px 16px 10px 16px;\\nbackground-color: #E0EBF5;\\n\\nh1 {\\nmargin-right: 16px;\\nfont-size: 20px;\\nfont-family: sans-serif;\\n}\\n\\n* {\\nmargin-top: 10px;\\nmargin-bottom: 10px;\\nmargin-right: 12px;\\nborder-radius: 5px;\\nbox-sizing: border-box;\\n}\\n\\nbutton {\\nborder: 1px solid #375EAB;\\nfont-size: 16px;\\nfont-family: sans-serif;\\nbackground: #375EAB;\\ncolor: white;\\nheight: 30px;\\n}\\n}\",\".cls1 { /*!*/ }\\n.cls2 {\\ncomposes: cls1;\\n\\ndisplay: flex;\\nflex-direction: row;\\nalign-items: center;\\npadding: 10px 16px 10px 16px;\\nbackground-color: #E0EBF5;\\n}\\n.cls2 h1 {\\nmargin-right: 16px;\\nfont-size: 20px;\\nfont-family: sans-serif;\\n}\\n.cls2 * {\\nmargin-top: 10px;\\nmargin-bottom: 10px;\\nmargin-right: 12px;\\nborder-radius: 5px;\\nbox-sizing: border-box;\\n}\\n.cls2 button {\\nborder: 1px solid #375EAB;\\nfont-size: 16px;\\nfont-family: sans-serif;\\nbackground: #375EAB;\\ncolor: white;\\nheight: 30px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9BcHAtTmF2YmFyLm1vZHVsZS5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsUUFBUSxJQUFJLEVBQUU7QUFDZDtBQUNBLGNBQWM7O0FBRWQsYUFBYTtBQUNiLG1CQUFtQjtBQUNuQixtQkFBbUI7QUFDbkIsNEJBQTRCO0FBQzVCLHlCQUF5QjtBQXdCekI7QUF0QkE7QUFDQSxrQkFBa0I7QUFDbEIsZUFBZTtBQUNmLHVCQUF1QjtBQUN2QjtBQUVBO0FBQ0EsZ0JBQWdCO0FBQ2hCLG1CQUFtQjtBQUNuQixrQkFBa0I7QUFDbEIsa0JBQWtCO0FBQ2xCLHNCQUFzQjtBQUN0QjtBQUVBO0FBQ0EseUJBQXlCO0FBQ3pCLGVBQWU7QUFDZix1QkFBdUI7QUFDdkIsbUJBQW1CO0FBQ25CLFlBQVk7QUFDWixZQUFZO0FBQ1oiLCJmaWxlIjoic3JjXFxBcHAtTmF2YmFyLm1vZHVsZS5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuY2xzMSB7IC8qISovIH1cbi5jbHMyIHtcbmNvbXBvc2VzOiBjbHMxO1xuXG5kaXNwbGF5OiBmbGV4O1xuZmxleC1kaXJlY3Rpb246IHJvdztcbmFsaWduLWl0ZW1zOiBjZW50ZXI7XG5wYWRkaW5nOiAxMHB4IDE2cHggMTBweCAxNnB4O1xuYmFja2dyb3VuZC1jb2xvcjogI0UwRUJGNTtcblxuaDEge1xubWFyZ2luLXJpZ2h0OiAxNnB4O1xuZm9udC1zaXplOiAyMHB4O1xuZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7XG59XG5cbioge1xubWFyZ2luLXRvcDogMTBweDtcbm1hcmdpbi1ib3R0b206IDEwcHg7XG5tYXJnaW4tcmlnaHQ6IDEycHg7XG5ib3JkZXItcmFkaXVzOiA1cHg7XG5ib3gtc2l6aW5nOiBib3JkZXItYm94O1xufVxuXG5idXR0b24ge1xuYm9yZGVyOiAxcHggc29saWQgIzM3NUVBQjtcbmZvbnQtc2l6ZTogMTZweDtcbmZvbnQtZmFtaWx5OiBzYW5zLXNlcmlmO1xuYmFja2dyb3VuZDogIzM3NUVBQjtcbmNvbG9yOiB3aGl0ZTtcbmhlaWdodDogMzBweDtcbn1cbn0iXX0= */\"],\"sourceRoot\":\"\"}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t\"cls1\": \"WlLYDOQAi_2gHMRjpYz2k\",\n\t\"cls2\": \"_2GZvzmSPqaENq77rUojI56 WlLYDOQAi_2gHMRjpYz2k\"\n};\nexport default ___CSS_LOADER_EXPORT___;\n","import peg from 'pegjs';\r\nimport staticGrammar from './entish.peg';\r\nimport seedrandom from 'seedrandom';\r\nimport Tracer from 'pegjs-backtrace';\r\n\r\nlet grammar: string;\r\nif (staticGrammar === 'entish.peg') {\r\n  // Just so jest can access non-js resources\r\n  const fs = require('fs');\r\n  grammar = fs.readFileSync('./src/entish.peg').toString();\r\n} else {\r\n  grammar = staticGrammar;\r\n}\r\n\r\nexport type Statement = Comment | Fact | Inference | Claim | Rolling | Query\r\n\r\nexport type Comment = {\r\n  type: 'comment'\r\n  value: string\r\n}\r\n\r\nexport type Fact = {\r\n  type: 'fact'\r\n  table: string\r\n  fields: Expression[]\r\n  negative?: boolean\r\n}\r\n\r\nexport type Inference = {\r\n  type: 'inference'\r\n  left: Fact\r\n  right: Conjunction | Disjunction\r\n}\r\n\r\nexport type Clause = Fact | Conjunction | Disjunction | Comparison\r\n\r\nexport type Conjunction = {\r\n  type: 'conjunction'\r\n  clauses: Clause[]\r\n}\r\n\r\nexport type Disjunction = {\r\n  type: 'disjunction'\r\n  clauses: Clause[]\r\n}\r\n\r\nexport type Comparison = {\r\n  type: 'comparison'\r\n  operator: ComparisonOperator\r\n  left: Expression\r\n  right: Expression\r\n}\r\n\r\nexport type ComparisonOperator = '=' | '>' | '<' | '>=' | '<=' | '!='\r\n\r\nexport type Claim = {\r\n  type: 'claim'\r\n  clause: Clause\r\n}\r\n\r\nexport type Rolling = {\r\n  type: 'rolling'\r\n  clause: Clause\r\n}\r\n\r\nexport type Query = {\r\n  type: 'query'\r\n  clause: Clause\r\n}\r\n\r\nexport type Expression = Constant | Function | BinaryOperation | Variable | Comparison | Aggregation\r\n\r\nexport type Constant = Boolean | String | Number | Roll\r\n\r\nexport type BinaryOperation = {\r\n  type: 'binary_operation'\r\n  left: Expression\r\n  right: Expression\r\n  operator: '+' | '-' | '*' | '/' | '^'\r\n}\r\n\r\nexport type Function = {\r\n  type: 'function'\r\n  function: 'floor' | 'sum' | 'count' | 'probability'\r\n  arguments: Expression[]\r\n}\r\n\r\nexport type Boolean = {\r\n  type: 'boolean'\r\n  value: boolean\r\n}\r\n\r\nexport type String = {\r\n  type: 'string'\r\n  value: string\r\n}\r\n\r\nexport type Variable = {\r\n  type: 'variable'\r\n  value: string\r\n}\r\n\r\nexport type Number = {\r\n  type: 'number'\r\n  value: number\r\n}\r\n\r\nexport type Roll = {\r\n  type: 'roll'\r\n  count: number\r\n  die: number\r\n  modifier: number\r\n}\r\n\r\nexport type Aggregation = {\r\n  type: 'aggregation'\r\n  function: 'sum' | 'count'\r\n  arguments: (Constant | Aggregation)[]\r\n}\r\n\r\nexport type Binding = {\r\n  facts: Fact[]\r\n  values: { [key: string]: Constant | Aggregation }\r\n  comparisons: Comparison[]\r\n}\r\n\r\nexport class Entception extends Error { }\r\n\r\nexport class BindingMismatch extends Error { }\r\n\r\nexport class TODO extends Error { }\r\n\r\nfunction groupBy<T>(array: T[], f: (o: T) => string) {\r\n  const groups: { [key: string]: T[] } = {};\r\n  array.forEach(o => {\r\n    const group = f(o);\r\n    groups[group] = groups[group] || [];\r\n    groups[group].push(o);\r\n  });\r\n  return Object.keys(groups).map(group => groups[group]);\r\n}\r\n\r\nfunction equal(expr1: Expression, expr2: Expression): boolean {\r\n  if (expr1.type !== expr2.type) return false;\r\n  if (expr1.type === 'roll' && expr2.type === 'roll') return rollToString(expr1) === rollToString(expr2);\r\n  if ('value' in expr1 && 'value' in expr2) return expr1.value === expr2.value;\r\n  throw new Entception(`incomparable types: ${expr1.type} and ${expr2.type}`);\r\n}\r\n\r\nexport default class Interpreter {\r\n\r\n  parser: PEG.Parser;\r\n  tables: { [key: string]: Constant[][] } = {}\r\n  inferences: Inference[] = []\r\n  rng: () => number\r\n\r\n  constructor(seed: string) {\r\n    this.parser = peg.generate(grammar, { trace: true });\r\n    this.rng = seedrandom(seed);\r\n  }\r\n\r\n  exec(statement: Statement) {\r\n    let results;\r\n    switch (statement.type) {\r\n      case 'comment':\r\n        return;\r\n      case 'fact':\r\n        this.loadFact(statement);\r\n        console.log(`added ${factToString(statement)}`);\r\n        return;\r\n      case 'inference':\r\n        console.log(`inferring ${inferenceToString(statement)}`);\r\n        this.loadInference(statement);\r\n        return;\r\n      case 'claim':\r\n        console.log(`testing ${claimToString(statement)}`)\r\n        if (!this.testClaim(statement)) {\r\n          throw new Entception(`false claim: ${claimToString(statement)}`);\r\n        } else {\r\n          console.log(`verified ${claimToString(statement)}`);\r\n        }\r\n        return;\r\n      case 'query':\r\n        console.log(`query: ${queryToString(statement)}`);\r\n        results = this.query(statement);\r\n        if (results.length === 0) console.warn('no matching facts found');\r\n        results.forEach(f => console.log(`found: ${factToString(f)}`));\r\n        return;\r\n      case 'rolling':\r\n        console.log(`rolling: ${rollingToString(statement)}`);\r\n        results = this.roll(statement);\r\n        if (results.length === 0) console.warn('no rolls found');\r\n        results.forEach(f => console.log(`rolled: ${factToString(f)}`));\r\n        return;\r\n      default:\r\n        throw new TODO(`unhandled statement type: ${(statement as any).type}`);\r\n    }\r\n  }\r\n\r\n  load(input: string) {\r\n    const tracer = new Tracer(input, { useColor: false });\r\n    try {\r\n      const statements = this.parser.parse(input, { tracer: tracer }).filter((x: any) => x);\r\n      for (let line in statements) {\r\n        const statement = statements[line];\r\n        this.exec(statement);\r\n      }\r\n    } catch (e) {\r\n      if ('location' in e) {\r\n        console.error(tracer.getBacktraceString());\r\n        throw new Error(`line ${e.location.start.line} Column ${e.location.start.column}: ${e.message}`);\r\n      } else {\r\n        console.error(e);\r\n        throw e;\r\n      }\r\n    }\r\n  }\r\n\r\n  loadFact(fact: Fact) {\r\n    if (fact.negative) {\r\n      this.tables[fact.table] = this.tables[fact.table].filter(row => !row.every((col, i) => equal(fact.fields[i], col)));\r\n      return;\r\n    }\r\n    if (!this.tables[fact.table]) {\r\n      this.tables[fact.table] = [];\r\n    }\r\n    if (fact.fields.some(expr => expr.type !== 'string' && expr.type !== 'number' && expr.type !== 'roll')) {\r\n      throw new Entception(`facts must be grounded with strings or numbers: ${factToString(fact)}`);\r\n    }\r\n    if (!this.tables[fact.table].some(e => e.every((f, i) => equal(f, fact.fields[i])))) {\r\n      this.tables[fact.table].push(fact.fields as Constant[]);\r\n      this.inferences.forEach(i => this.loadInference(i, true));\r\n    }\r\n  }\r\n\r\n  query(query: Query): Fact[] {\r\n    return this.search(query.clause).map(b => b.facts).flat();\r\n  }\r\n\r\n  roll(roll: Rolling): Fact[] {\r\n    const newFacts: Fact[] = this.search(roll.clause).map(b => b.facts).flat().map(fact => {\r\n      return {\r\n        type: 'fact',\r\n        table: fact.table,\r\n        fields: fact.fields.map(f => f.type === 'roll' ? this.generateRoll(f) : f),\r\n      };\r\n    });\r\n    newFacts.forEach(fact => this.loadFact(fact));\r\n    return newFacts;\r\n  }\r\n\r\n  loadInference(inference: Inference, recursive: boolean = false) {\r\n    const bindings = this.search(inference.right);\r\n    let facts = bindings.map(binding => this.ground(inference.left, binding));\r\n    if (facts.some(fact => fact.fields.some(field => field.type === 'aggregation'))) {\r\n      facts = groupBy(facts, fact => {\r\n        return fact.fields\r\n          .filter(f => f.type === 'string' || f.type === 'number')\r\n          .map(f => (f as String | Number).value)\r\n          .join('-');\r\n      }).map(facts => {\r\n        const first = facts[0];\r\n        return {\r\n          type: 'fact',\r\n          table: first.table,\r\n          fields: first.fields.map((e, i) => this.aggregate(e, i, facts))\r\n        };\r\n      });\r\n    }\r\n    facts.forEach(f => this.loadFact(f));\r\n    if (!recursive && !this.inferences.some(inf => inferenceToString(inf) === inferenceToString(inference))) {\r\n      this.inferences.push(inference);\r\n    }\r\n  }\r\n\r\n  aggregate(expr: Expression, index: number, groups: Fact[]): Expression {\r\n    switch (expr.type) {\r\n      case 'string':\r\n      case 'number':\r\n        return expr;\r\n      case 'aggregation':\r\n        if (expr.function === 'sum') {\r\n          const args = groups.map(f => {\r\n            const field = f.fields[index];\r\n            if (field.type !== 'aggregation') {\r\n              throw new TODO();\r\n            }\r\n            return field.arguments;\r\n          });\r\n          return {\r\n            type: 'number',\r\n            value: args.flat().reduce((n, c) => {\r\n              if (c.type !== 'number') throw new Entception(`Can't sum type ${c.type}`);\r\n              return n + c.value;\r\n            }, 0),\r\n          };\r\n        }\r\n        throw new Entception(`Non-existent aggregation function ${expr.function}`);\r\n      default:\r\n        throw new TODO();\r\n    }\r\n  }\r\n\r\n  ground(fact: Fact, binding: Binding): Fact {\r\n    return {\r\n      type: 'fact',\r\n      table: fact.table,\r\n      fields: fact.fields.map(expr => {\r\n        const result = this.evaluateExpression(expr, binding);\r\n        switch (typeof (result)) {\r\n          case 'number':\r\n            return {\r\n              type: 'number',\r\n              value: result,\r\n            };\r\n          case 'string':\r\n            return {\r\n              type: 'string',\r\n              value: result,\r\n            };\r\n          case 'object':\r\n            return result;\r\n          default:\r\n            throw new Entception(`unknown expression result type ${typeof (result)}`);\r\n        }\r\n      }),\r\n      negative: fact.negative,\r\n    }\r\n  }\r\n\r\n  search(clause: Clause): Binding[] {\r\n    switch (clause.type) {\r\n      case 'fact':\r\n        // facts return one binding per matching row of the table\r\n        return (this.tables[clause.table] || []).map(row => this.bind(row, clause)).filter(b => b !== undefined) as Binding[];\r\n      case 'conjunction':\r\n        // conjunction joins bindings into a single binding\r\n        let rows: Binding[][] = [];\r\n        this.join(clause.clauses.map(clause => this.search(clause)), [], rows);\r\n        return rows.map(bindings => this.reduceBindings(bindings)).filter(b => b !== undefined) as Binding[];\r\n      case 'disjunction':\r\n        // disjunction concatenates bindings\r\n        return clause.clauses.map(clause => this.search(clause)).flat();\r\n      case 'comparison':\r\n        return [{\r\n          facts: [] as Fact[],\r\n          values: {},\r\n          comparisons: [clause],\r\n        }];\r\n    }\r\n  }\r\n\r\n  join(bindings: Binding[][], group: Binding[], result: Binding[][]) {\r\n    if (bindings.length === 0) {\r\n      result.push(group)\r\n      return\r\n    }\r\n    const first = bindings[0];\r\n    const rest = bindings.slice(1);\r\n    for (let binding of first) {\r\n      this.join(rest, group.concat([binding]), result);\r\n    }\r\n  }\r\n\r\n  // reduce joins bindings together where same-named variables match\r\n  // it discards non-matching bindings (i.e. bindings that \"disagree on the facts\")\r\n  reduceBindings(bindings: Binding[]): Binding | undefined {\r\n    try {\r\n      return bindings.reduce((current, binding) => {\r\n        Object.keys(current.values).forEach(key => {\r\n          if (binding.values[key] && !equal(binding.values[key], current.values[key])) {\r\n            throw new BindingMismatch(`bindings disagree: ${expressionToString(binding.values[key])} != ${expressionToString(current.values[key])}`);\r\n          }\r\n        });\r\n        const newBinding = {\r\n          facts: current.facts.concat(binding.facts),\r\n          values: Object.assign(current.values, binding.values),\r\n          comparisons: binding.comparisons,\r\n        };\r\n        binding.comparisons.forEach(comparison => {\r\n          if (!this.compare(comparison, newBinding)) {\r\n            throw new BindingMismatch(`false comparison: ${clauseToString(comparison)}, ${newBinding.values}`);\r\n          }\r\n        });\r\n        return newBinding;\r\n      }, {\r\n        facts: [],\r\n        values: {},\r\n        comparisons: [],\r\n      } as Binding);\r\n    } catch (e) {\r\n      if (e instanceof BindingMismatch) return undefined;\r\n      throw e;\r\n    }\r\n  }\r\n\r\n  bind(constants: Constant[], clause: Fact): Binding | undefined {\r\n    try {\r\n      const bindings = constants.map((value, i) => {\r\n        const field = clause.fields[i];\r\n        switch (field.type) {\r\n          case 'string':\r\n          case 'number':\r\n          case 'roll':\r\n            if (!equal(value, field)) {\r\n              throw new BindingMismatch(`binding mismatch: ${value} != ${field}`);\r\n            }\r\n            return [`${clause.table}[${i}]`, value];\r\n          case 'variable':\r\n            if (field.value === '?') {\r\n              return [`${clause.table}[${i}]`, value];\r\n            }\r\n            return [field.value, value];\r\n          default:\r\n            throw new Entception(`can't handle ${field.type} ${expressionToString(field)} in clause`);\r\n        }\r\n      });\r\n      return {\r\n        facts: [{\r\n          type: 'fact',\r\n          table: clause.table,\r\n          fields: constants,\r\n        }],\r\n        values: Object.fromEntries(bindings),\r\n        comparisons: [],\r\n      };\r\n    } catch (e) {\r\n      if (e instanceof BindingMismatch) return undefined;\r\n      throw e;\r\n    }\r\n  }\r\n\r\n  compare(comparison: Comparison, binding: Binding): boolean {\r\n    const left = this.evaluateExpression(comparison.left, binding);\r\n    const right = this.evaluateExpression(comparison.right, binding);\r\n    if (left.type === 'aggregation' || right.type === 'aggregation') {\r\n      return false;\r\n    }\r\n    const l = left.type === 'roll' ? this.averageRoll(left) : left.value;\r\n    const r = right.type === 'roll' ? this.averageRoll(right) : right.value;\r\n    switch (comparison.operator) {\r\n      case '=':\r\n        return l === r;\r\n      case '!=':\r\n        return l !== r;\r\n      case '>':\r\n        return l > r;\r\n      case '>=':\r\n        return l >= r;\r\n      case '<':\r\n        return l < r;\r\n      case '<=':\r\n        return l <= r;\r\n    }\r\n  }\r\n\r\n  probability(roll: Roll, op: ComparisonOperator, target: number): number {\r\n    let outcomes = 0;\r\n    let positive_outcomes = 0;\r\n    for (let i = 0; i < roll.count; i++) {\r\n      for (let j = 1; j <= roll.die; j++) {\r\n        const r = j + roll.modifier;\r\n        outcomes++;\r\n        switch (op) {\r\n          case '=':\r\n            if (r === target) positive_outcomes++;\r\n            break;\r\n          case '!=':\r\n            if (r !== target) positive_outcomes++;\r\n            break;\r\n          case '>=':\r\n            if (r >= target) positive_outcomes++;\r\n            break;\r\n          case '<=':\r\n            if (r <= target) positive_outcomes++;\r\n            break;\r\n          case '>':\r\n            if (r > target) positive_outcomes++;\r\n            break;\r\n          case '<':\r\n            if (r < target) positive_outcomes++;\r\n            break;\r\n        }\r\n      }\r\n    }\r\n    return positive_outcomes / outcomes;\r\n  }\r\n\r\n  averageRoll(roll: Roll): number {\r\n    let total = 0;\r\n    for (let i = 0; i < roll.count; i++) {\r\n      total += Math.floor(0.5 * roll.die) + 1 + roll.modifier;\r\n    }\r\n    return total;\r\n  }\r\n\r\n  generateRoll(roll: Roll): Number {\r\n    let total = 0;\r\n    for (let i = 0; i < roll.count; i++) {\r\n      total += Math.floor(this.rng() * roll.die) + 1 + roll.modifier;\r\n    }\r\n    return {\r\n      type: 'number',\r\n      value: total,\r\n    };\r\n  }\r\n\r\n  testClaim(claim: Claim): boolean {\r\n    if (claim.clause.type === 'fact') {\r\n      const table = this.tables[claim.clause.table];\r\n      if (table) {\r\n        for (const row of table) {\r\n          if (row.length !== claim.clause.fields.length) continue;\r\n          if (claim.clause.fields.every((field, i) => field.type === row[i].type && JSON.stringify(field) === JSON.stringify(row[i]))) { return !claim.clause.negative }\r\n        }\r\n      }\r\n      return !!claim.clause.negative;\r\n    } else if (claim.clause.type === 'conjunction') {\r\n      const bindings = this.search(claim.clause);\r\n      return bindings.length > 0;\r\n    } else if (claim.clause.type === 'comparison') {\r\n      const result = this.evaluateExpression(claim.clause, { facts: [], values: {}, comparisons: [] });\r\n      if (result.type === 'boolean') return result.value;\r\n    }\r\n    throw new Entception(`can't verify claims of type ${claim.clause.type}`);\r\n  }\r\n\r\n  evaluateFunction(fn: Function, binding: Binding): Constant | Aggregation {\r\n    switch (fn.function) {\r\n      case 'floor':\r\n        const arg = this.evaluateExpression(fn.arguments[0], binding);\r\n        if (arg.type !== 'number') {\r\n          throw new Entception(`floor requires numeric argument, got ${arg.type}`);\r\n        }\r\n        return { type: 'number', value: Math.floor(arg.value) };\r\n      case 'sum':\r\n        return {\r\n          type: 'aggregation',\r\n          function: 'sum',\r\n          arguments: fn.arguments.map(expr => this.evaluateExpression(expr, binding)),\r\n        };\r\n      case 'probability':\r\n        if (fn.arguments[0].type === 'comparison') {\r\n          const roll = this.evaluateExpression(fn.arguments[0].left, binding);\r\n          const operator = fn.arguments[0].operator;\r\n          const target = this.evaluateExpression(fn.arguments[0].right, binding);\r\n          if (roll.type !== 'roll' || target.type !== 'number') {\r\n            throw new Entception(`can't compute probability for ${fn.arguments[0]}`);\r\n          }\r\n          return { type: 'number', value: this.probability(roll, operator, target.value) };\r\n        } else {\r\n          const roll = this.evaluateExpression(fn.arguments[0], binding);\r\n          if (roll.type !== 'roll') throw new Entception(`first argument to probability function must be a roll`);\r\n          return roll;\r\n        }\r\n      case 'count':\r\n      default:\r\n        throw new TODO();\r\n    }\r\n  }\r\n\r\n  evaluateBinaryOperation(op: BinaryOperation, binding: Binding): number {\r\n    const left = this.evaluateExpression(op.left, binding);\r\n    if (left.type !== 'number') {\r\n      throw new Entception(`binary operation requires number on left-hand side, got ${left}`);\r\n    }\r\n    const right = this.evaluateExpression(op.right, binding);\r\n    if (right.type !== 'number') {\r\n      throw new Entception(`binary operation requires number on right-hand side, got ${right}`);\r\n    }\r\n    switch (op.operator) {\r\n      case '+':\r\n        return left.value + right.value;\r\n      case '-':\r\n        return left.value - right.value;\r\n      case '/':\r\n        return left.value / right.value;\r\n      case '*':\r\n        return left.value * right.value;\r\n      case '^':\r\n        return Math.pow(left.value, right.value);\r\n    }\r\n  }\r\n\r\n  evaluateExpression(expr: Expression, binding: Binding): Constant | Aggregation {\r\n    switch (expr.type) {\r\n      case 'binary_operation':\r\n        return { type: 'number', value: this.evaluateBinaryOperation(expr, binding) };\r\n      case 'function':\r\n        return this.evaluateFunction(expr, binding);\r\n      case 'variable':\r\n        return binding.values[expr.value];\r\n      case 'comparison':\r\n        return { type: 'boolean', value: this.compare(expr, binding) };\r\n      case 'boolean':\r\n      case 'string':\r\n      case 'number':\r\n      case 'roll':\r\n      case 'aggregation':\r\n        return expr;\r\n    }\r\n  }\r\n}\r\n\r\nexport function statementToString(stmt: Statement): string {\r\n  switch (stmt.type) {\r\n    case 'claim':\r\n      return claimToString(stmt);\r\n    case 'inference':\r\n      return inferenceToString(stmt);\r\n    case 'query':\r\n      return queryToString(stmt);\r\n    default:\r\n      return `[${stmt.type}]`;\r\n  }\r\n}\r\n\r\nexport function inferenceToString(inf: Inference): string {\r\n  return `${factToString(inf.left)} :- ${clauseToString(inf.right)}.`\r\n}\r\n\r\nexport function queryToString(q: Query): string {\r\n  return `${clauseToString(q.clause)}?`;\r\n}\r\n\r\nexport function factToString(fact: Fact): string {\r\n  return `${fact.negative ? '~' : ''}${fact.table}(${fact.fields.map(e => expressionToString(e)).join(', ')})`;\r\n}\r\n\r\nexport function clauseToString(clause: Clause): string {\r\n  switch (clause.type) {\r\n    case 'fact':\r\n      return factToString(clause);\r\n    case 'conjunction':\r\n      return '(' + clause.clauses.map(c => clauseToString(c)).join(' & ') + ')';\r\n    case 'disjunction':\r\n      return '(' + clause.clauses.map(c => clauseToString(c)).join(' | ') + ')';\r\n    case 'comparison':\r\n      return comparisonToString(clause);\r\n  }\r\n}\r\n\r\nexport function expressionToString(expr: Expression): string {\r\n  switch (expr.type) {\r\n    case 'boolean':\r\n      return expr.value.toString();\r\n    case 'string':\r\n      return expr.value;\r\n    case 'number':\r\n      return expr.value.toString();\r\n    case 'roll':\r\n      return rollToString(expr);\r\n    case 'variable':\r\n      return expr.value;\r\n    case 'binary_operation':\r\n      return `${expressionToString(expr.left)} ${expr.operator} ${expressionToString(expr.right)}`;\r\n    case 'function':\r\n      return `${expr.function}(${expr.arguments.map(e => expressionToString(e)).join(', ')})`;\r\n    case 'comparison':\r\n      return comparisonToString(expr);\r\n    case 'aggregation':\r\n      return `${expr.function}(${expr.arguments.map(e => {\r\n        if (typeof (e) === 'object') return expressionToString(e);\r\n        return e;\r\n      }).join(', ')})`;\r\n  }\r\n}\r\n\r\nexport function comparisonToString(comparison: Comparison): string {\r\n  return `${expressionToString(comparison.left)} ${comparison.operator} ${expressionToString(comparison.right)}`;\r\n}\r\n\r\nexport function rollToString(roll: Roll): string {\r\n  const mod = roll.modifier > 0 ? `+${roll.modifier}` : roll.modifier < 0 ? `-${roll.modifier}` : '';\r\n  return `${roll.count}d${roll.die}${mod}`;\r\n}\r\n\r\nexport function claimToString(claim: Claim): string {\r\n  return `∴ ${clauseToString(claim.clause)}`;\r\n}\r\n\r\nexport function rollingToString(roll: Rolling): string {\r\n  return `🎲 ${clauseToString(roll.clause)}`;\r\n}","export default \"{\\r\\n  function joinClauses(type, first, rest) {\\r\\n    if (first.type === 'fact' && rest.length === 1 && (rest[0].type === 'conjunction' || rest[0].type === 'disjunction')) {\\r\\n      rest[0].clauses.unshift(first);\\r\\n      return rest[0];\\r\\n    }\\r\\n    return {\\r\\n      type: type,\\r\\n      clauses: [first].concat(rest),\\r\\n    };\\r\\n  }\\r\\n  function comparisonTree(left, rest) {\\r\\n    const right = rest.shift();\\r\\n    const node = { type: 'comparison', left, operator: right.operator, right: right.expr };\\r\\n    if (rest.length === 0) {\\r\\n      return node;\\r\\n    }\\r\\n    return comparisonTree(node, rest);\\r\\n  }\\r\\n  function flatten(arr) {\\r\\n    return arr.reduce((acc, cur) => acc.concat(Array.isArray(cur) ? flatten(cur) : cur), []);\\r\\n  };\\r\\n  function parseNumber(n) {\\r\\n    return parseFloat(flatten(n).filter(d => d).join(''));\\r\\n  }\\r\\n}\\r\\n\\r\\nstatements\\r\\n  = statement+\\r\\n\\r\\nstatement\\r\\n  = comment:comment \\\"\\\\n\\\"? { return comment }\\r\\n  / inference:inference \\\".\\\" { return inference }\\r\\n  / claim:claim \\\".\\\" { return claim }\\r\\n  / fact:fact \\\".\\\" { return fact }\\r\\n  / roll:rolling \\\".\\\" { return roll}\\r\\n  / \\\"?\\\" query:clause \\\".\\\" { return { type: 'query', clause: query } }\\r\\n  / [ \\\\t\\\\r\\\\n]+ { return null }\\r\\n\\r\\nfact\\r\\n  = whitespace name:variable \\\"(\\\" args:arguments \\\")\\\" whitespace { return { type: 'fact', table: name.value, fields: args.arguments } }\\r\\n  / whitespace \\\"~\\\" fact:fact { return { ...fact, negative: true } }\\r\\n\\r\\nexpr\\r\\n  = addition\\r\\n  / multiplication \\r\\n  / probability\\r\\n  / function\\r\\n  / \\\"(\\\" comparison \\\")\\\"\\r\\n  / variable\\r\\n  / roll\\r\\n  / string \\r\\n  / number\\r\\n\\r\\nterm\\r\\n  = multiplication\\r\\n  / factor\\r\\n\\r\\nfactor\\r\\n  = parenthetical_expr\\r\\n  / function\\r\\n  / variable\\r\\n  / number \\r\\n\\r\\naddition\\r\\n  = left:term whitespace operator:([+\\\\-]) whitespace right:expr { return { type: 'binary_operation', operator, left, right } }\\r\\n\\r\\nmultiplication\\r\\n  = left:factor whitespace operator:([*/]) whitespace right:expr { return { type: 'binary_operation', operator, left, right } }\\r\\n\\r\\nparenthetical_expr\\r\\n  = \\\"(\\\" \\\" \\\"* expr:expr \\\" \\\"* \\\")\\\" { return expr }\\r\\n\\r\\nfunction\\r\\n  = name:variable \\\"(\\\" args:arguments \\\")\\\" { return { type: 'function', function: name.value, arguments: args.arguments } }\\r\\n\\r\\narguments\\r\\n  = whitespace first:expr rest:nextargs* whitespace { return { type: 'arguments', arguments: [first].concat(rest) } }\\r\\n\\r\\nnextargs\\r\\n  = \\\",\\\" whitespace expr:expr { return expr }\\r\\n\\r\\nprobability\\r\\n  = \\\"Pr(\\\" whitespace left:expr whitespace operator:comparison_operator whitespace right:expr whitespace \\\")\\\" { return { type: 'function', function: 'probability', arguments: [{ type: 'comparison', left, operator, right }] } }\\r\\n  / \\\"Pr(\\\" whitespace arg:expr whitespace \\\")\\\" { return { type: 'function', function: 'probability', arguments: [arg]}}\\r\\n\\r\\ninference\\r\\n  = left:fact \\\":-\\\" whitespace right:clause { return { type: 'inference', left, right } }\\r\\n\\r\\nclause\\r\\n  = conjunction\\r\\n  / disjunction\\r\\n  / \\\"(\\\" whitespace clause:clause whitespace \\\")\\\" { return clause }\\r\\n  / comparison\\r\\n  / fact\\r\\n\\r\\nconjunction\\r\\n  = \\\"(\\\" first:clause \\\")\\\" whitespace rest:next_conjunction+ { return joinClauses('conjunction', first, rest) }\\r\\n  / first:fact rest:next_conjunction+ { return joinClauses('conjunction', first, rest) }\\r\\n\\r\\ndisjunction\\r\\n  = \\\"(\\\" first:fact \\\")\\\" whitespace rest:next_disjunction+ { return joinClauses('disjunction', first, rest) }\\r\\n  / first:fact rest:next_disjunction+ { return joinClauses('disjunction', first, rest) }\\r\\n\\r\\nnext_conjunction\\r\\n  = \\\"&\\\" whitespace clause:clause { return clause }\\r\\n\\r\\nnext_disjunction\\r\\n  = \\\"|\\\" whitespace clause:clause { return clause }\\r\\n\\r\\nclaim\\r\\n  = \\\"∴\\\" clause:clause { return { type: 'claim', clause: clause } }\\r\\n\\r\\nrolling\\r\\n  = \\\"🎲\\\" clause:clause { return { type: 'rolling', clause: clause } }\\r\\n\\r\\ncomparison\\r\\n  = whitespace \\\"(\\\" left:expr \\\")\\\" rest:next_comparison+ { return comparisonTree(left, rest) }\\r\\n  / whitespace left:expr rest:next_comparison+ { return comparisonTree(left, rest) }\\r\\n\\r\\nnext_comparison\\r\\n  = whitespace operator:comparison_operator whitespace expr:expr { return { operator, expr } }\\r\\n\\r\\ncomparison_operator\\r\\n  = op:\\\"=\\\" { return op }\\r\\n  / op:\\\"!=\\\" { return op }\\r\\n  / op:\\\">=\\\" { return op }\\r\\n  / op:\\\"<=\\\" { return op }\\r\\n  / op:\\\">\\\" { return op }\\r\\n  / op:\\\"<\\\" { return op }\\r\\n\\r\\ncomment\\r\\n  = \\\"//\\\" comment:[^\\\\n]* { return { type: 'comment', value: comment.join('').trim() } }\\r\\n  / \\\"/*\\\" comment:(!\\\"*/\\\" .)* \\\"*/\\\" { return { type: 'comment', value: comment.flat().join('').trim() }}\\r\\n\\r\\nstring\\r\\n  = name:([A-Z][A-Za-z_]+) { return { type: 'string', value: name[0] + name[1].join('') } }\\r\\n\\r\\nvariable\\r\\n  = name:([a-z_]+) { return { type: 'variable', value: name.join('') } }\\r\\n  / \\\"?\\\" { return { type: 'variable', value: '?' } }\\r\\n\\r\\nroll\\r\\n  = count:([0-9]+) \\\"d\\\" die:([0-9]+) modifier:([+-][0-9]+)? { return { type: 'roll', count: parseInt(count.join('')), die: parseInt(die.join('')), modifier: modifier ? parseInt(modifier.join('')) : 0 } }\\r\\n\\r\\nnumber\\r\\n  = number:([-]?[0-9]+([.][0-9]+)?) { return { type: 'number', value: parseNumber(number) } }\\r\\n\\r\\nwhitespace\\r\\n  = [ \\\\t\\\\r\\\\n]*\\r\\n\";","export default \"// Auric has the Barbarian class\\r\\nclass(Auric, Barbarian).\\r\\n\\r\\n// Auric has a Strength of 16\\r\\nattribute(Auric, Strength, 16).\\r\\n\\r\\n// Auric has a Wisdom of 16\\r\\nattribute(Auric, Wisdom, 9).\\r\\n\\r\\n// A character's bonus is half their attribute score minus ten\\r\\nbonus(character, attr, floor((score-10)/2)) :- attribute(character, attr, score).\\r\\n\\r\\n// Therefore, Auric has a Strength bonus of 3\\r\\n∴ bonus(Auric, Strength, 3).\\r\\n\\r\\n// Therefore, Auric has a Wisdom bonus of -1\\r\\n∴ bonus(Auric, Wisdom, -1).\\r\\n\\r\\n// Full Plate has an armor bonus of 3\\r\\narmor(FullPlate, 3).\\r\\n\\r\\n// Full Plate has a weight of 4\\r\\nweight(FullPlate, 4).\\r\\n\\r\\n// Full Plate has the clumsy tag\\r\\ntag(FullPlate, Clumsy).\\r\\n\\r\\n// A small shield\\r\\nweight(RoundShield, 1).\\r\\narmor(RoundShield, 1).\\r\\n\\r\\n// And a sword\\r\\nweight(TwoHandedSword, 2).\\r\\ndamage(TwoHandedSword, 1d8).\\r\\ntag(TwoHandedSword, Close).\\r\\n\\r\\n// Given gear has a tag and the character is wearing the gear, add the tag to the character\\r\\ntag(character, tag) :- (wearing(character, gear) | wielding(character, gear)) & tag(gear, tag).\\r\\n\\r\\n// Given a character, their armor is the sum of the armor of gear they are wearing/wielding\\r\\narmor(character, sum(armor)) :- (wearing(character, gear) | wielding(character, gear)) & armor(gear, armor).\\r\\n\\r\\n// Given a character, their load is the sum of the weights of gear they are wearing and wielding\\r\\nload(character, sum(weight)) :- (wearing(character, gear) | wielding(character, gear)) & weight(gear, weight).\\r\\n\\r\\n// The max load of a Barbarian is 8 plus their strength bonus\\r\\nmax_load(character, 8+str) :- class(character, Barbarian) & bonus(character, Strength, str).\\r\\n\\r\\n// Give Auric his gear\\r\\nwearing(Auric, FullPlate).\\r\\nwielding(Auric, RoundShield).\\r\\nwielding(Auric, TwoHandedSword).\\r\\n\\r\\n// So Auric is Clumsy, but he's got 4 armor a load of 7, and a max load of 11\\r\\n∴ tag(Auric, Clumsy).\\r\\n∴ armor(Auric, 4).\\r\\n∴ load(Auric, 7).\\r\\n∴ max_load(Auric, 11).\\r\\n\\r\\n? wielding(Auric, ?) | wearing(Auric, ?).\\r\\n\\r\\n// The move \\\"Full Plate and Packing Steel\\\" negates the Clumsy tag\\r\\n~tag(character, Clumsy) :- move(character, FullPlateAndPackingSteel).\\r\\n\\r\\n// Auric has the move \\\"Full Plate and Packing Steel\\\"\\r\\nmove(Auric, FullPlateAndPackingSteel).\\r\\n\\r\\n// Auric is not Clumsy\\r\\n∴ ~tag(Auric, Clumsy).\\r\\n\\r\\n// Rolls and probability - work in progress\\r\\nattack(Barbarian, 1d20+2).\\r\\n\\r\\n∴ attack(Barbarian, roll) & Pr(roll >= 15) = 0.4.\\r\\n\\r\\nenemy(Orc).\\r\\narmor(Orc, 10).\\r\\n\\r\\nhit(character, weapon, enemy, roll, armor) :- class(character, class) & attack(class, roll) & wielding(character, weapon) & damage(weapon, ?) & enemy(enemy) & armor(enemy, armor) & roll >= armor.\\r\\n\\r\\n🎲 attack(Barbarian, ?) & enemy(Orc).\\r\\n\\r\\n∴ hit(Auric, TwoHandedSword, Orc, 14, 10).\";","import React, { useRef, useState } from 'react';\r\nimport styled from 'astroturf/react';\r\nimport Editor from \"@monaco-editor/react\";\r\n\r\nimport Interpreter, { Constant, expressionToString } from './entmoot';\r\nimport useMonacoEntish from './useMonacoEntish';\r\nimport dungeon_world from './dungeon_world.ent';\r\n\r\nconst Container = styled(\"div\")`\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100vh;\r\n  width: 100vw;\r\n\r\n  select {\r\n    padding: 5px;\r\n    font-size: 0.875rem;\r\n    border: 0.0625rem solid #375EAB;\r\n    height: 30px;\r\n  }\r\n`;\r\n\r\nconst Navbar = styled(\"div\")`\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  padding: 10px 16px 10px 16px;\r\n  background-color: #E0EBF5;\r\n\r\n  h1 {\r\n    margin-right: 16px;\r\n    font-size: 20px;\r\n    font-family: sans-serif;\r\n  }\r\n\r\n  * {\r\n    margin-top: 10px;\r\n    margin-bottom: 10px;\r\n    margin-right: 12px;\r\n    border-radius: 5px;\r\n    box-sizing: border-box;\r\n  }\r\n\r\n  button {\r\n    border: 1px solid #375EAB;\r\n    font-size: 16px;\r\n    font-family: sans-serif;\r\n    background: #375EAB;\r\n    color: white;\r\n    height: 30px;\r\n  }\r\n`;\r\n\r\nfunction Database({ interpreter }: { interpreter: Interpreter }) {\r\n  const [selectedTableName, setSelectedTableName] = useState<string | undefined>(undefined);\r\n  return <div style={{ margin: \"16px 24px\" }}>\r\n    {Object.keys(interpreter.tables).length > 0 &&\r\n      <select onChange={event => { setSelectedTableName(event.target.value) }}>\r\n        {Object.keys(interpreter.tables).map(table_name => <option\r\n          key={table_name} value={table_name}>\r\n          {table_name}\r\n        </option>)}\r\n      </select>\r\n    }\r\n    {selectedTableName &&\r\n      <Table name={selectedTableName} rows={interpreter.tables[selectedTableName]} />\r\n    }\r\n  </div >;\r\n}\r\n\r\nfunction Table({ name, rows }: { name: string, rows: Constant[][] }) {\r\n  return <table>\r\n    <tbody>\r\n      {rows.map((row, i) => <tr key={`${name}-${i}`}>\r\n        {row.map((val, j) => <td key={`${name}-${i}-${j}`}>\r\n          {expressionToString(val)}\r\n        </td>)}\r\n      </tr>)}\r\n    </tbody>\r\n  </table>;\r\n}\r\n\r\nfunction App() {\r\n  useMonacoEntish();\r\n  const examples: { [key: string]: string } = {\r\n    dungeon_world: dungeon_world,\r\n    clear: '',\r\n  };\r\n  const [interpreter, setInterpreter] = useState<Interpreter>(new Interpreter('seed'));\r\n  const [code, setCode] = useState<string>(examples.dungeon_world);\r\n  const [error, setError] = useState<string | undefined>(undefined);\r\n  const [log, setLog] = useState<string[]>([]);\r\n  const editorRef = useRef<any>(null);\r\n  const onExampleChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\r\n    const example = examples[event.target.value];\r\n    setCode(example);\r\n    editorRef.current?.getModel().setValue(example);\r\n    setInterpreter(new Interpreter('seed'));\r\n  }\r\n  const run = () => {\r\n    const tmp = (console as any).log;\r\n    const newLog: string[] = [];\r\n    (console as any).log = (msg: string) => {\r\n      newLog.push(msg);\r\n    }\r\n    try {\r\n      interpreter.load(code);\r\n      setError(undefined);\r\n    } catch (e) {\r\n      setError(e.message);\r\n    }\r\n    (console as any).log = tmp;\r\n    setLog(newLog);\r\n    setInterpreter(interpreter);\r\n  }\r\n  return <Container>\r\n    <Navbar>\r\n      <h1>Entish Playground</h1>\r\n      <button onClick={run}>Run</button>\r\n      <select onChange={onExampleChange} defaultValue={\"dungeon_world\"}>\r\n        <option value=\"clear\">Clear</option>\r\n        <option value=\"dungeon_world\">Dungeon World</option>\r\n      </select>\r\n      <a href=\"//github.com/etherealmachine/entish#readme\">README</a>\r\n      <div style={{ marginLeft: \"auto\" }}>\r\n        <span><a href=\"//github.com/etherealmachine\">James Pettit</a> ©2021</span>\r\n      </div>\r\n    </Navbar>\r\n    <div style={{ height: \"calc(100vh - 70px)\" }}>\r\n      <div style={{ height: \"60%\" }}>\r\n        <Editor\r\n          defaultLanguage=\"entish\"\r\n          defaultValue={code}\r\n          onChange={value => { if (value) setCode(value) }}\r\n          options={{ minimap: { enabled: false }, scrollBeyondLastLine: false, scrollbar: { alwaysConsumeMouseWheel: false } }}\r\n          onMount={editor => { editorRef.current = editor; editor.layout(); }}\r\n        />\r\n      </div>\r\n      <div style={{ height: \"40%\", display: \"flex\", justifyContent: \"flex-start\" }}>\r\n        <div style={{ height: \"100%\", overflow: \"scroll\" }}>\r\n          <p style={{ color: \"#900\" }}>{error}</p>\r\n          <div>\r\n            {log.map((msg, i) => <p key={`log-msg-${i}`}>{msg}</p>)}\r\n          </div>\r\n        </div>\r\n        <Database interpreter={interpreter} />\r\n      </div>\r\n    </div>\r\n  </Container>;\r\n}\r\n\r\nexport default App;\r\n","import { useMonaco } from \"@monaco-editor/react\";\r\n\r\nexport default function useMonacoEntish() {\r\n\tconst monaco = useMonaco();\r\n\tif (monaco) {\r\n\t\tmonaco.languages.register({ id: 'entish' });\r\n\r\n\t\t// Register a tokens provider for the language\r\n\t\tmonaco.languages.setMonarchTokensProvider('entish', {\r\n\t\t\tdefaultToken: 'invalid',\r\n\t\t\tkeywords: [],\r\n\t\t\tbrackets: [\r\n\t\t\t\t{ open: '(', close: ')', token: 'delimiter.parenthesis' }\r\n\t\t\t],\r\n\t\t\ttokenizer: {\r\n\t\t\t\troot: [\r\n\t\t\t\t\t[/∴|:-|\\.|^\\?/, 'keyword'],\r\n\t\t\t\t\t[/\\/\\/.*$/, 'comment'],\r\n\t\t\t\t\t[/[A-Z][a-z]*/, 'constant'],\r\n\t\t\t\t\t[/[0-9]+d[0-9]+([+-][0-9]+)?/, 'constant'],\r\n\t\t\t\t\t[/\\d+/, 'number'],\r\n\t\t\t\t\t[/[()]/, '@brackets'],\r\n\t\t\t\t\t[/([a-z_]+)\\(/, 'identifier'],\r\n\t\t\t\t\t[/[a-z_]+|\\?/, 'variable.name'],\r\n\t\t\t\t\t[/[,]/, 'delimiter'],\r\n\t\t\t\t\t[/~|=|>|<|!=|>=|<=|\\*|\\/|\\+|-|\\^|&|\\|/, 'operators'],\r\n\t\t\t\t\t[/[ \\t\\r\\n]+/, ''],\r\n\t\t\t\t],\r\n\t\t\t},\r\n\t\t});\r\n\t}\r\n}\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}