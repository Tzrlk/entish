{"version":3,"sources":["App-Container.module.css","App-Database.module.css","Highlight.tsx","ent.hljs.ts","entmoot.ts","entish.peg","example.ent","App.tsx","reportWebVitals.ts","index.tsx","webpack:///./src/App-Container.module.css?18f8","webpack:///./src/App-Database.module.css?dc39","webpack:///./src/index.css?cfe4","index.css"],"names":["___CSS_LOADER_EXPORT___","push","module","i","locals","Highlight","props","ref","useRef","useEffect","node","current","hljs","highlightElement","style","fontSize","className","language","dangerouslySetInnerHTML","__html","children","toString","registerLanguage","api","name","aliases","contains","C_LINE_COMMENT_MODE","COMMENT","scope","begin","beginScope","2","NUMBER_RE","1","end","grammar","staticGrammar","Entception","Error","Interpreter","parser","tables","this","peg","generate","statement","type","loadFact","console","log","factToString","inferenceToString","newFacts","loadInference","forEach","f","claimToString","testClaim","negative","queryToString","query","input","statements","parse","filter","x","line","exec","fact","table","row","every","col","expr1","expr2","value","equal","fields","some","expr","searchInferenceTree","map","b","facts","flat","inference","right","binding","ground","left","field","array","groups","o","group","Object","keys","groupBy","join","first","e","aggregate","index","arguments","reduce","n","c","result","evaluateExpression","clause","bind","undefined","rows","clauses","bindings","reduceBindings","values","comparisons","length","rest","slice","concat","key","newBinding","assign","comparison","compare","clauseToString","constants","expressionToString","v","fromEntries","operator","claim","fn","function","arg","Math","floor","op","pow","evaluateBinaryOperation","evaluateFunction","inf","q","Table","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","content","__esModule","default","options","exports"],"mappings":"kGAAA,kCAGIA,EAHJ,MAG8B,GAA4B,KAE1DA,EAAwBC,KAAK,CAACC,EAAOC,EAAI,olBAAqlB,GAAG,CAAC,QAAU,EAAE,QAAU,CAAC,+CAA+C,4CAA4C,MAAQ,GAAG,SAAW,+EAA+E,eAAiB,CAAC,sGAAsG,kkBAAkkB,WAAa,MAEhiDH,EAAwBI,OAAS,CAChC,KAAQ,0BACR,KAAQ,iDAEM,a,iCCXf,kCAGIJ,EAHJ,MAG8B,GAA4B,KAE1DA,EAAwBC,KAAK,CAACC,EAAOC,EAAI,srBAAurB,GAAG,CAAC,QAAU,EAAE,QAAU,CAAC,8CAA8C,2CAA2C,MAAQ,GAAG,SAAW,8FAA8F,eAAiB,CAAC,0IAA0I,kqBAAkqB,WAAa,MAEnxDH,EAAwBI,OAAS,CAChC,KAAQ,0BACR,KAAQ,mDAEM,a,gJCHA,SAASC,EAAUC,GAAuD,IAAD,EACjFC,EAAMC,iBAAoB,MAOhC,OANAC,qBAAU,WACT,GAAIF,EAAK,CACR,IAAMG,EAAOH,EAAII,QACbD,GAAME,IAAKC,iBAAiBH,OAG3B,qBAAKI,MAAO,CAAEC,SAAU,QAAxB,SACN,sBACCR,IAAKA,EACLS,UAAS,mBAAcV,EAAMW,UAC7BC,wBAAyB,CAAEC,QAAQ,UAAAb,EAAMc,gBAAN,eAAgBC,aAAc,QAdpET,IAAKU,iBAAiB,UCGP,SAAgBC,GAC7B,MAAO,CACLC,KAAM,SACNC,QAAS,CAAC,OACVC,SAAU,CACRd,IAAKe,oBACLf,IAAKgB,QACH,OACA,OACA,CACEF,SAAU,CACR,CACEG,MAAO,MAAOC,MAAO,YAK7B,CACED,MAAO,UACPC,MAAO,UAET,CACED,MAAO,UACPC,MAAO,MAET,CACEA,MAAO,CAAC,KAAM,MACdC,WAAY,CAAEC,EAAG,YAEnB,CACEF,MAAO,CAAC,KAAM,MACdC,WAAY,CAAEC,EAAG,YAEnB,CACEH,MAAO,SACPC,MAAOlB,IAAKqB,WAEd,CACEH,MAAO,CAAC,UAAW,MACnBC,WAAY,CAAEG,EAAG,mBAEnB,CACEL,MAAO,WACPC,MAAO,qCAET,CACED,MAAO,SACPC,MAAO,QACPK,IAAK,aAEP,CACEN,MAAO,WACPC,MAAO,WAET,CACEA,MAAO,CAAC,OAAQ,MAChBC,WAAY,CAAEC,EAAG,2B,IC9DrBI,E,iECHW,okHDSbA,EAAUC,EAgGL,IAAMC,EAAb,wIAAgCC,Q,IAkBXC,E,WAKnB,aAAe,yBAHfC,YAGc,OAFdC,OAAoD,GAGlDC,KAAKF,OAASG,IAAIC,SAAST,G,wCAG7B,SAAKU,GAAuB,IAAD,OACzB,OAAQA,EAAUC,MAChB,IAAK,UACH,OACF,IAAK,OAGH,OAFAJ,KAAKK,SAASF,QACdG,QAAQC,IAAR,gBAAqBC,EAAaL,KAEpC,IAAK,YACHG,QAAQC,IAAR,oBAAyBE,EAAkBN,KAC3C,IAAMO,EAAWV,KAAKW,cAAcR,GAGpC,OAFAO,EAASE,SAAQ,SAAAC,GAAC,OAAI,EAAKR,SAASQ,WACpCH,EAASE,SAAQ,SAAAC,GAAC,OAAIP,QAAQC,IAAR,gBAAqBC,EAAaK,QAE1D,IAAK,QAEH,GADAP,QAAQC,IAAR,kBAAuBO,EAAcX,KACjCH,KAAKe,UAAUZ,OAAiBA,EAAUa,SAC5C,MAAM,IAAIrB,EAAJ,uBAA+BmB,EAAcX,KAIrD,YAFEG,QAAQC,IAAR,mBAAwBO,EAAcX,KAG1C,IAAK,QAGH,OAFAG,QAAQC,IAAR,iBAAsBU,EAAcd,UACpCH,KAAKkB,MAAMf,GAAWS,SAAQ,SAAAC,GAAC,OAAIP,QAAQC,IAAR,iBAAsBC,EAAaK,W,kBAK5E,SAAKM,GACH,IAAMC,EAAapB,KAAKF,OAAOuB,MAAMF,GAAOG,QAAO,SAACC,GAAD,OAAYA,KAC/D,IAAK,IAAIC,KAAQJ,EAAY,CAC3B,IAAMjB,EAAYiB,EAAWI,GAC7BxB,KAAKyB,KAAKtB,M,sBAId,SAASuB,GACP,GAAIA,EAAKV,SACPhB,KAAKD,OAAO2B,EAAKC,OAAS3B,KAAKD,OAAO2B,EAAKC,OAAOL,QAAO,SAAAM,GAAG,OAAKA,EAAIC,OAAM,SAACC,EAAKtE,GAAN,OAtDjF,SAAeuE,EAAmBC,GAChC,GAAID,EAAM3B,OAAS4B,EAAM5B,KAAM,OAAO,EACtC,GAAI,UAAW2B,GAAS,UAAWC,EAAO,OAAOD,EAAME,QAAUD,EAAMC,MACvE,MAAM,IAAItC,EAAJ,8BAAsCoC,EAAM3B,KAA5C,gBAAwD4B,EAAM5B,OAmDuB8B,CAAMR,EAAKS,OAAO3E,GAAIsE,aAD/G,CAOA,GAHK9B,KAAKD,OAAO2B,EAAKC,SACpB3B,KAAKD,OAAO2B,EAAKC,OAAS,IAExBD,EAAKS,OAAOC,MAAK,SAAAC,GAAI,MAAkB,WAAdA,EAAKjC,MAAmC,YAAdiC,EAAKjC,QAC1D,MAAM,IAAIT,EAAJ,2DAAmEa,EAAakB,KAExF1B,KAAKD,OAAO2B,EAAKC,OAAOrE,KAAKoE,EAAKS,W,mBAGpC,SAAMjB,GACJ,OAAOlB,KAAKsC,oBAAoBpB,EAAMA,OAAOqB,KAAI,SAAAC,GAAC,OAAIA,EAAEC,SAAOC,S,2BAGjE,SAAcC,GAA+B,IAAD,OAEpCF,EADWzC,KAAKsC,oBAAoBK,EAAUC,OAC7BL,KAAI,SAAAM,GAAO,OAAI,EAAKC,OAAOH,EAAUI,KAAMF,MAClE,OAAIJ,EAAML,MAAK,SAAAV,GAAI,OAAIA,EAAKS,OAAOC,MAAK,SAAAY,GAAK,MAAmB,gBAAfA,EAAM5C,WAnF3D,SAAoB6C,EAAYpC,GAC9B,IAAMqC,EAAiC,GAMvC,OALAD,EAAMrC,SAAQ,SAAAuC,GACZ,IAAMC,EAAQvC,EAAEsC,GAChBD,EAAOE,GAASF,EAAOE,IAAU,GACjCF,EAAOE,GAAO9F,KAAK6F,MAEdE,OAAOC,KAAKJ,GAAQX,KAAI,SAAAa,GAAK,OAAIF,EAAOE,MA6EpCG,CAAQd,GAAO,SAAAf,GACpB,OAAOA,EAAKS,OACTb,QAAO,SAAAT,GAAC,MAAe,WAAXA,EAAET,MAAgC,YAAXS,EAAET,QACrCmC,KAAI,SAAA1B,GAAC,OAAKA,EAAuBoB,SACjCuB,KAAK,QACPjB,KAAI,SAAAE,GACL,IAAMgB,EAAQhB,EAAM,GACpB,MAAO,CACLrC,KAAM,OACNuB,MAAO8B,EAAM9B,MACbQ,OAAQsB,EAAMtB,OAAOI,KAAI,SAACmB,EAAGlG,GAAJ,OAAU,EAAKmG,UAAUD,EAAGlG,EAAGiF,UAIvDA,I,uBAGT,SAAUJ,EAAkBuB,EAAeV,GACzC,OAAQb,EAAKjC,MACX,IAAK,SACL,IAAK,UACH,OAAOiC,EACT,IAAK,cAQH,MAAO,CACLjC,KAAM,UACN6B,MATWiB,EAAOX,KAAI,SAAA1B,GACtB,IAAMmC,EAAQnC,EAAEsB,OAAOyB,GACvB,GAAmB,gBAAfZ,EAAM5C,KACR,MAAM,IAAIT,EAAJ,QAER,OAAOqD,EAAMa,aAIenB,OAAOoB,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,IAAG,IAE/D,QACE,MAAM,IAAIrE,EAAJ,W,oBAIZ,SAAO+B,EAAYmB,GAAyB,IAAD,OACzC,MAAO,CACLzC,KAAM,OACNuB,MAAOD,EAAKC,MACZQ,OAAQT,EAAKS,OAAOI,KAAI,SAAAF,GACtB,IAAM4B,EAAS,EAAKC,mBAAmB7B,EAAMQ,GAC7C,cAAgBoB,GACd,IAAK,SACH,MAAO,CACL7D,KAAM,UACN6B,MAAOgC,GAEX,IAAK,SACH,MAAO,CACL7D,KAAM,SACN6B,MAAOgC,GAEX,IAAK,SACH,OAAOA,EACT,QACE,MAAM,IAAItE,EAAJ,gDAAyDsE,QAGrEjD,SAAUU,EAAKV,Y,iCAInB,SAAoBmD,GAA4B,IAAD,OAC7C,OAAQA,EAAO/D,MACb,IAAK,OAEH,OAAOJ,KAAKD,OAAOoE,EAAOxC,OAAOY,KAAI,SAAAX,GAAG,OAAI,EAAKwC,KAAKxC,EAAKuC,MAAS7C,QAAO,SAAAkB,GAAC,YAAU6B,IAAN7B,KAClF,IAAK,cAEH,IAAI8B,EAAoB,GAExB,OADAtE,KAAKwD,KAAKW,EAAOI,QAAQhC,KAAI,SAAA4B,GAAM,OAAI,EAAK7B,oBAAoB6B,MAAU,GAAIG,GACvEA,EAAK/B,KAAI,SAAAiC,GAAQ,OAAI,EAAKC,eAAeD,MAAWlD,QAAO,SAAAkB,GAAC,YAAU6B,IAAN7B,KACzE,IAAK,cAEH,OAAO2B,EAAOI,QAAQhC,KAAI,SAAA4B,GAAM,OAAI,EAAK7B,oBAAoB6B,MAASzB,OACxE,IAAK,aACH,MAAO,CAAC,CACND,MAAO,GACPiC,OAAQ,GACRC,YAAa,CAACR,Q,kBAKtB,SAAKK,EAAuBpB,EAAkBa,GAC5C,GAAwB,IAApBO,EAASI,OAAb,CAIA,IALiE,EAK3DnB,EAAQe,EAAS,GACjBK,EAAOL,EAASM,MAAM,GANqC,cAO7CrB,GAP6C,IAOjE,2BAA2B,CAAC,IAAnBZ,EAAkB,QACzB7C,KAAKwD,KAAKqB,EAAMzB,EAAM2B,OAAO,CAAClC,IAAWoB,IARsB,oCAE/DA,EAAO3G,KAAK8F,K,4BAYhB,SAAeoB,GAA2C,IAAD,OACvD,IACE,OAAOA,EAASV,QAAO,SAAC9F,EAAS6E,GAC/BQ,OAAOC,KAAKtF,EAAQ0G,QAAQ9D,SAAQ,SAAAoE,GAClC,GAAInC,EAAQ6B,OAAOM,IAAQnC,EAAQ6B,OAAOM,KAAShH,EAAQ0G,OAAOM,GAChE,MAAM,IAAIrF,EAAJ,6BAAqCkD,EAAQ6B,OAAOM,GAApD,eAA+DhH,EAAQ0G,OAAOM,QAGxF,IAAMC,EAAa,CACjBxC,MAAOzE,EAAQyE,MAAMsC,OAAOlC,EAAQJ,OACpCiC,OAAQrB,OAAO6B,OAAOlH,EAAQ0G,OAAQ7B,EAAQ6B,QAC9CC,YAAa,IAOf,OALA9B,EAAQ8B,YAAY/D,SAAQ,SAAAuE,GAC1B,IAAK,EAAKC,QAAQD,EAAYF,GAC5B,MAAM,IAAItF,EAAJ,4BAAoC0F,EAAeF,GAAnD,aAAmEF,EAAWP,YAGjFO,IACN,CACDxC,MAAO,GACPiC,OAAQ,GACRC,YAAa,KAEf,MAAOjB,GACP,KAAMA,aAAa/D,GAAa,MAAM+D,EACtC,U,kBAIJ,SAAK4B,EAAiCnB,GACpC,IAAMK,EAAWc,EAAU/C,KAAI,SAACN,EAAOzE,GACrC,IAAMwF,EAAQmB,EAAOhC,OAAO3E,GAC5B,OAAQwF,EAAM5C,MACZ,IAAK,SACL,IAAK,UACH,OAAI6B,EAAMA,QAAUe,EAAMf,OAGnB,CAAC,GAAD,OAAIkC,EAAOxC,MAAX,YAAoBnE,EAApB,KAA0ByE,EAAMA,OACzC,IAAK,WACH,MAAoB,MAAhBe,EAAMf,MACD,CAAC,GAAD,OAAIkC,EAAOxC,MAAX,YAAoBnE,EAApB,KAA0ByE,EAAMA,OAElC,CAACe,EAAMf,MAAOA,EAAMA,OAC7B,QACE,MAAM,IAAItC,EAAJ,uBAA+BqD,EAAM5C,KAArC,YAA6CmF,EAAmBvC,GAAhE,mBAGZ,IAAIwB,EAASpC,MAAK,SAAAoD,GAAC,OAAKA,KACxB,MAAO,CACL/C,MAAO,CAAC,CACNrC,KAAM,OACNuB,MAAOwC,EAAOxC,MACdQ,OAAQmD,IAEVZ,OAAQrB,OAAOoC,YAAYjB,GAC3BG,YAAa,M,qBAIjB,SAAQQ,EAAwBtC,GAC9B,IAAME,EAAO/C,KAAKkE,mBAAmBiB,EAAWpC,KAAMF,GAChDD,EAAQ5C,KAAKkE,mBAAmBiB,EAAWvC,MAAOC,GACxD,GAAIE,aAAgBM,QAAUT,aAAiBS,OAC7C,MAAM,IAAIzD,MAAM,8BAElB,OAAQuF,EAAWO,UACjB,IAAK,IACH,OAAO3C,IAASH,EAClB,IAAK,KACH,OAAOG,IAASH,EAClB,IAAK,IACH,OAAOG,EAAOH,EAChB,IAAK,KACH,OAAOG,GAAQH,EACjB,IAAK,IACH,OAAOG,EAAOH,EAChB,IAAK,KACH,OAAOG,GAAQH,K,uBAIrB,SAAU+C,GACR,IAAMhE,EAAQ3B,KAAKD,OAAO4F,EAAMhE,OAChC,GAAIA,EAAO,CAAC,IAAD,gBACSA,GADT,yBACEC,EADF,QAEP,OAAIA,EAAIgD,SAAWe,EAAMxD,OAAOyC,OAAQ,WACpCe,EAAMxD,OAAON,OAAM,SAACmB,EAAOxF,GAAR,OAAcwF,EAAM5C,OAASwB,EAAIpE,GAAG4C,MAAQ4C,EAAMf,QAAUL,EAAIpE,GAAGyE,SAAgB,CAAN,GAAO,QAA3G,GAFF,2BAAyB,CAAC,IAAD,yDADhB,+BAMX,OAAO,I,8BAGT,SAAiB2D,EAAc/C,GAAkD,IAAD,OAC9E,OAAQ+C,EAAGC,UACT,IAAK,QACH,IAAMC,EAAM9F,KAAKkE,mBAAmB0B,EAAG/B,UAAU,GAAIhB,GACrD,GAAqB,kBAATiD,EACV,MAAM,IAAInG,EAAJ,+CAAuDmG,IAE/D,OAAOC,KAAKC,MAAMF,GACpB,IAAK,MACH,MAAO,CACL1F,KAAM,cACNyF,SAAU,MACVhC,UAAW+B,EAAG/B,UAAUtB,KAAI,SAAAF,GAAI,OAAI,EAAK6B,mBAAmB7B,EAAMQ,OAEtE,QACE,MAAM,IAAIlD,EAAJ,gCAAwCiG,EAAGC,c,qCAIvD,SAAwBI,EAAqBpD,GAC3C,IAAME,EAAO/C,KAAKkE,mBAAmB+B,EAAGlD,KAAMF,GAC9C,GAAsB,kBAAVE,EACV,MAAM,IAAIpD,EAAJ,kEAA0EoD,IAElF,IAAMH,EAAQ5C,KAAKkE,mBAAmB+B,EAAGrD,MAAOC,GAChD,GAAuB,kBAAXD,EACV,MAAM,IAAIjD,EAAJ,mEAA2EiD,IAEnF,OAAQqD,EAAGP,UACT,IAAK,IACH,OAAO3C,EAAOH,EAChB,IAAK,IACH,OAAOG,EAAOH,EAChB,IAAK,IACH,OAAOG,EAAOH,EAChB,IAAK,IACH,OAAOG,EAAOH,EAChB,IAAK,IACH,OAAOmD,KAAKG,IAAInD,EAAMH,M,gCAI5B,SAAmBP,EAAkBQ,GACnC,OAAQR,EAAKjC,MACX,IAAK,mBACH,OAAOJ,KAAKmG,wBAAwB9D,EAAMQ,GAC5C,IAAK,WACH,OAAO7C,KAAKoG,iBAAiB/D,EAAMQ,GACrC,IAAK,WACH,OAAOA,EAAQ6B,OAAOrC,EAAKJ,OAC7B,IAAK,SACL,IAAK,UACH,OAAOI,EAAKJ,MACd,IAAK,cACH,OAAOI,O,KAkBR,SAAS5B,EAAkB4F,GAChC,MAAM,GAAN,OAAU7F,EAAa6F,EAAItD,MAA3B,eAAuCsC,EAAegB,EAAIzD,OAA1D,KAGK,SAAS3B,EAAcqF,GAC5B,MAAM,GAAN,OAAUjB,EAAeiB,EAAEpF,OAA3B,KAGK,SAASV,EAAakB,GAC3B,MAAM,GAAN,OAAUA,EAAKV,SAAW,IAAM,IAAhC,OAAqCU,EAAKC,MAA1C,YAAmDD,EAAKS,OAAOI,KAAI,SAAAmB,GAAC,OAAI6B,EAAmB7B,MAAIF,KAAK,MAApG,KAGK,SAAS6B,EAAelB,GAC7B,OAAQA,EAAO/D,MACb,IAAK,OACH,OAAOI,EAAa2D,GACtB,IAAK,cACH,MAAO,IAAMA,EAAOI,QAAQhC,KAAI,SAAAyB,GAAC,OAAIqB,EAAerB,MAAIR,KAAK,OAAS,IACxE,IAAK,cACH,MAAO,IAAMW,EAAOI,QAAQhC,KAAI,SAAAyB,GAAC,OAAIqB,EAAerB,MAAIR,KAAK,OAAS,IACxE,IAAK,aACH,MAAM,GAAN,OAAU+B,EAAmBpB,EAAOpB,MAApC,YAA6CoB,EAAOuB,SAApD,YAAgEH,EAAmBpB,EAAOvB,SAIzF,SAAS2C,EAAmBlD,GACjC,OAAQA,EAAKjC,MACX,IAAK,SACH,OAAOiC,EAAKJ,MACd,IAAK,UACH,OAAOI,EAAKJ,MAAMvD,WACpB,IAAK,WACH,OAAO2D,EAAKJ,MACd,IAAK,mBACH,MAAM,GAAN,OAAUsD,EAAmBlD,EAAKU,MAAlC,YAA2CV,EAAKqD,SAAhD,YAA4DH,EAAmBlD,EAAKO,QACtF,IAAK,WACH,MAAM,GAAN,OAAUP,EAAKwD,SAAf,YAA2BxD,EAAKwB,UAAUtB,KAAI,SAAAmB,GAAC,OAAI6B,EAAmB7B,MAAIF,KAAK,MAA/E,KACF,IAAK,cACH,MAAM,GAAN,OAAUnB,EAAKwD,SAAf,YAA2BxD,EAAKwB,UAAUtB,KAAI,SAAAmB,GAC5C,MAAmB,kBAAPA,EAAwB6B,EAAmB7B,GAChDA,KACNF,KAAK,MAHR,MAOC,SAAS1C,EAAc6E,GAC5B,MAAM,UAAN,OAAYnF,EAAamF,IEzfZ,+yF,kCCOf,EAAkB,gB,qCAMlB,EAAiB,gB,oCAOjB,SAASY,EAAM,GAAf,sBACA,uCACA,iCACA,gCACA,gCACA,yDACA,yDACA,SADA,8CADA,sCAqBA,MAXA,WACA,YAEA,OADA,UACA,4BACA,gDACA,0BACA,kIC3BeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,mBChBA,IAAI5H,EAAM,EAAQ,IACF0I,EAAU,EAAQ,KAIC,kBAFvBA,EAAUA,EAAQC,WAAaD,EAAQE,QAAUF,KAG/CA,EAAU,CAAC,CAAC/J,EAAOC,EAAI8J,EAAS,MAG9C,IAAIG,EAAU,CAEd,OAAiB,OACjB,WAAoB,GAEP7I,EAAI0I,EAASG,GAI1BlK,EAAOmK,QAAUJ,EAAQ7J,QAAU,I,mBClBnC,IAAImB,EAAM,EAAQ,IACF0I,EAAU,EAAQ,KAIC,kBAFvBA,EAAUA,EAAQC,WAAaD,EAAQE,QAAUF,KAG/CA,EAAU,CAAC,CAAC/J,EAAOC,EAAI8J,EAAS,MAG9C,IAAIG,EAAU,CAEd,OAAiB,OACjB,WAAoB,GAEP7I,EAAI0I,EAASG,GAI1BlK,EAAOmK,QAAUJ,EAAQ7J,QAAU,I,mBClBnC,IAAImB,EAAM,EAAQ,IACF0I,EAAU,EAAQ,IAIC,kBAFvBA,EAAUA,EAAQC,WAAaD,EAAQE,QAAUF,KAG/CA,EAAU,CAAC,CAAC/J,EAAOC,EAAI8J,EAAS,MAG9C,IAAIG,EAAU,CAEd,OAAiB,OACjB,WAAoB,GAEP7I,EAAI0I,EAASG,GAI1BlK,EAAOmK,QAAUJ,EAAQ7J,QAAU,I,gCClBnC,kCAGIJ,EAHJ,MAG8B,GAA4B,KAE1DA,EAAwBC,KAAK,CAACC,EAAOC,EAAI,8XAA+X,GAAG,CAAC,QAAU,EAAE,QAAU,CAAC,6BAA6B,MAAQ,GAAG,SAAW,gFAAgF,eAAiB,CAAC,+XAA+X,WAAa,MAEr9B,c","file":"static/js/main.c831febe.chunk.js","sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"._27KvXhK1Cn3xeSy_ERUuYO { /*!*/ }\\n.iCwJ4OetHHYzpK6q4N79Q {\\n\\ndisplay: flex;\\nflex-direction: row;\\nmargin: 24px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9BcHAtQ29udGFpbmVyLm1vZHVsZS5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsUUFBUSxJQUFJLEVBQUU7QUFDZDtBQUNBLGNBQWM7O0FBRWQsYUFBYTtBQUNiLG1CQUFtQjtBQUNuQixZQUFZO0FBQ1oiLCJmaWxlIjoic3JjL0FwcC1Db250YWluZXIubW9kdWxlLmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5jbHMxIHsgLyohKi8gfVxuLmNsczIge1xuY29tcG9zZXM6IGNsczE7XG5cbmRpc3BsYXk6IGZsZXg7XG5mbGV4LWRpcmVjdGlvbjogcm93O1xubWFyZ2luOiAyNHB4O1xufSJdfQ== */\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/src/App-Container.module.css\",\"webpack://./src/App-Container.module.css\"],\"names\":[],\"mappings\":\"AAAA,2BAAQ,IAAI,EAAE;AACd;;AAGA,aAAa;AACb,mBAAmB;AACnB,YAAY;AACZ;ACCA,wdAAwd\",\"sourcesContent\":[\".cls1 { /*!*/ }\\n.cls2 {\\ncomposes: cls1;\\n\\ndisplay: flex;\\nflex-direction: row;\\nmargin: 24px;\\n}\",\".cls1 { /*!*/ }\\n.cls2 {\\ncomposes: cls1;\\n\\ndisplay: flex;\\nflex-direction: row;\\nmargin: 24px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9BcHAtQ29udGFpbmVyLm1vZHVsZS5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsUUFBUSxJQUFJLEVBQUU7QUFDZDtBQUNBLGNBQWM7O0FBRWQsYUFBYTtBQUNiLG1CQUFtQjtBQUNuQixZQUFZO0FBQ1oiLCJmaWxlIjoic3JjL0FwcC1Db250YWluZXIubW9kdWxlLmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5jbHMxIHsgLyohKi8gfVxuLmNsczIge1xuY29tcG9zZXM6IGNsczE7XG5cbmRpc3BsYXk6IGZsZXg7XG5mbGV4LWRpcmVjdGlvbjogcm93O1xubWFyZ2luOiAyNHB4O1xufSJdfQ== */\"],\"sourceRoot\":\"\"}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t\"cls1\": \"_27KvXhK1Cn3xeSy_ERUuYO\",\n\t\"cls2\": \"iCwJ4OetHHYzpK6q4N79Q _27KvXhK1Cn3xeSy_ERUuYO\"\n};\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"._2BYnjqztxulEI7KbCixh7w { /*!*/ }\\n._3eFiO1hfUNAgpUjkXbgij2 {\\n\\ndisplay: flex;\\nflex-direction: row;\\nflex-wrap: wrap;\\njustify-content: space-between;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9BcHAtRGF0YWJhc2UubW9kdWxlLmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxRQUFRLElBQUksRUFBRTtBQUNkO0FBQ0EsY0FBYzs7QUFFZCxhQUFhO0FBQ2IsbUJBQW1CO0FBQ25CLGVBQWU7QUFDZiw4QkFBOEI7QUFDOUIiLCJmaWxlIjoic3JjL0FwcC1EYXRhYmFzZS5tb2R1bGUuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmNsczEgeyAvKiEqLyB9XG4uY2xzMiB7XG5jb21wb3NlczogY2xzMTtcblxuZGlzcGxheTogZmxleDtcbmZsZXgtZGlyZWN0aW9uOiByb3c7XG5mbGV4LXdyYXA6IHdyYXA7XG5qdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG59Il19 */\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/src/App-Database.module.css\",\"webpack://./src/App-Database.module.css\"],\"names\":[],\"mappings\":\"AAAA,2BAAQ,IAAI,EAAE;AACd;;AAGA,aAAa;AACb,mBAAmB;AACnB,eAAe;AACf,8BAA8B;AAC9B;ACCA,ohBAAohB\",\"sourcesContent\":[\".cls1 { /*!*/ }\\n.cls2 {\\ncomposes: cls1;\\n\\ndisplay: flex;\\nflex-direction: row;\\nflex-wrap: wrap;\\njustify-content: space-between;\\n}\",\".cls1 { /*!*/ }\\n.cls2 {\\ncomposes: cls1;\\n\\ndisplay: flex;\\nflex-direction: row;\\nflex-wrap: wrap;\\njustify-content: space-between;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9BcHAtRGF0YWJhc2UubW9kdWxlLmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxRQUFRLElBQUksRUFBRTtBQUNkO0FBQ0EsY0FBYzs7QUFFZCxhQUFhO0FBQ2IsbUJBQW1CO0FBQ25CLGVBQWU7QUFDZiw4QkFBOEI7QUFDOUIiLCJmaWxlIjoic3JjL0FwcC1EYXRhYmFzZS5tb2R1bGUuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmNsczEgeyAvKiEqLyB9XG4uY2xzMiB7XG5jb21wb3NlczogY2xzMTtcblxuZGlzcGxheTogZmxleDtcbmZsZXgtZGlyZWN0aW9uOiByb3c7XG5mbGV4LXdyYXA6IHdyYXA7XG5qdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG59Il19 */\"],\"sourceRoot\":\"\"}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t\"cls1\": \"_2BYnjqztxulEI7KbCixh7w\",\n\t\"cls2\": \"_3eFiO1hfUNAgpUjkXbgij2 _2BYnjqztxulEI7KbCixh7w\"\n};\nexport default ___CSS_LOADER_EXPORT___;\n","import React, { useEffect, useRef } from 'react';\nimport hljs from 'highlight.js';\nimport 'highlight.js/styles/github.css';\n\nimport entish from './ent.hljs';\n\nhljs.registerLanguage('entish', entish);\n\nexport default function Highlight(props: React.PropsWithChildren<{ language: string }>) {\n\tconst ref = useRef<HTMLElement>(null);\n\tuseEffect(() => {\n\t\tif (ref) {\n\t\t\tconst node = ref.current;;\n\t\t\tif (node) hljs.highlightElement(node);\n\t\t}\n\t});\n\treturn <pre style={{ fontSize: '12px' }}>\n\t\t<code\n\t\t\tref={ref}\n\t\t\tclassName={`language-${props.language}`}\n\t\t\tdangerouslySetInnerHTML={{ __html: props.children?.toString() || \"\" }} />\n\t</pre>;\n}\n","/*\nLanguage: Entish\nDescription: Entish is a datalog-like language for developing RPG rules\nCategory: \nWebsite: https://github.com/etherealmachine/entish\n*/\nimport hljs, { HLJSApi } from \"highlight.js\";\n\n/** @type LanguageFn */\nexport default function entish(api?: HLJSApi) {\n  return {\n    name: 'Entish',\n    aliases: ['ent'],\n    contains: [\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.COMMENT(\n        '/\\\\*', // begin\n        '\\\\*/', // end\n        {\n          contains: [\n            {\n              scope: 'doc', begin: '@\\\\w+'\n            }\n          ]\n        }\n      ),\n      {\n        scope: 'keyword',\n        begin: '∴'\n      },\n      {\n        scope: 'keyword',\n        begin: ':-'\n      },\n      {\n        begin: [/\\)/, /\\?/],\n        beginScope: { 2: 'keyword' }\n      },\n      {\n        begin: [/\\)/, /\\./],\n        beginScope: { 2: 'keyword' }\n      },\n      {\n        scope: 'number',\n        begin: hljs.NUMBER_RE\n      },\n      {\n        begin: [/[a-z_]+/, /\\(/],\n        beginScope: { 1: 'title.function' }\n      },\n      {\n        scope: 'operator',\n        begin: /-|\\+|\\/|\\*|\\^|&|\\||>|<|=|>=|<=|!=/\n      },\n      {\n        scope: 'string',\n        begin: /[A-Z]/,\n        end: /[a-zA-Z]+/\n      },\n      {\n        scope: 'variable',\n        begin: /[a-z_]+/\n      },\n      {\n        begin: [/,\\s+/, /\\?/],\n        beginScope: { 2: 'variable.language' }\n      }\n    ] as unknown as any\n  };\n}\n","import peg from 'pegjs';\nimport staticGrammar from './entish.peg';\n\nlet grammar: string;\nif (staticGrammar === 'entish.peg') {\n  // Just so jest can access non-js resources\n  const fs = require('fs');\n  grammar = fs.readFileSync('./src/entish.peg').toString();\n} else {\n  grammar = staticGrammar;\n}\n\nexport type Statement = Comment | Fact | Inference | Claim | Query\n\nexport type Comment = {\n  type: 'comment'\n  value: string\n}\n\nexport type Fact = {\n  type: 'fact'\n  table: string\n  fields: Expression[]\n  negative?: boolean\n}\n\nexport type Inference = {\n  type: 'inference'\n  left: Fact\n  right: Conjunction | Disjunction\n}\n\nexport type Clause = Fact | Conjunction | Disjunction | Comparison\n\nexport type Conjunction = {\n  type: 'conjunction'\n  clauses: Clause[]\n}\n\nexport type Disjunction = {\n  type: 'disjunction'\n  clauses: Clause[]\n}\n\nexport type Comparison = {\n  type: 'comparison'\n  operator: '=' | '>' | '<' | '>=' | '<=' | '!='\n  left: Expression\n  right: Expression\n}\n\nexport type Claim = {\n  type: 'claim'\n  table: string\n  fields: Expression[]\n  negative?: boolean\n}\n\nexport type Query = {\n  type: 'query'\n  query: Clause\n}\n\nexport type Expression = Function | BinaryOperation | String | Variable | Integer | Aggregation\n\nexport type BinaryOperation = {\n  type: 'binary_operation'\n  left: Expression\n  right: Expression\n  operator: '+' | '-' | '*' | '/' | '^'\n}\n\nexport type Function = {\n  type: 'function'\n  function: 'floor' | 'sum'\n  arguments: Expression[]\n}\n\nexport type String = {\n  type: 'string'\n  value: string\n}\n\nexport type Variable = {\n  type: 'variable'\n  value: string\n}\n\nexport type Integer = {\n  type: 'integer'\n  value: number\n}\n\nexport type Aggregation = {\n  type: 'aggregation'\n  function: 'sum'\n  arguments: (string | number | Aggregation)[]\n}\n\nexport type Binding = {\n  facts: Fact[]\n  values: { [key: string]: string | number | Aggregation }\n  comparisons: Comparison[]\n}\n\nexport class Entception extends Error { }\n\nfunction groupBy<T>(array: T[], f: (o: T) => string) {\n  const groups: { [key: string]: T[] } = {};\n  array.forEach(o => {\n    const group = f(o);\n    groups[group] = groups[group] || [];\n    groups[group].push(o);\n  });\n  return Object.keys(groups).map(group => groups[group]);\n}\n\nfunction equal(expr1: Expression, expr2: Expression): boolean {\n  if (expr1.type !== expr2.type) return false;\n  if ('value' in expr1 && 'value' in expr2) return expr1.value === expr2.value;\n  throw new Entception(`incomparable types: ${expr1.type} and ${expr2.type}`);\n}\n\nexport default class Interpreter {\n\n  parser: PEG.Parser;\n  tables: { [key: string]: (String | Integer)[][] } = {}\n\n  constructor() {\n    this.parser = peg.generate(grammar);\n  }\n\n  exec(statement: Statement) {\n    switch (statement.type) {\n      case 'comment':\n        return;\n      case 'fact':\n        this.loadFact(statement);\n        console.log(`added ${factToString(statement)}`);\n        return;\n      case 'inference':\n        console.log(`inferring ${inferenceToString(statement)}`);\n        const newFacts = this.loadInference(statement);\n        newFacts.forEach(f => this.loadFact(f));\n        newFacts.forEach(f => console.log(`added ${factToString(f)}`));\n        return;\n      case 'claim':\n        console.log(`testing ${claimToString(statement)}`)\n        if (this.testClaim(statement) === !!statement.negative) {\n          throw new Entception(`false claim: ${claimToString(statement)}`);\n        } else {\n          console.log(`verified ${claimToString(statement)}`);\n        }\n        return;\n      case 'query':\n        console.log(`query: ${queryToString(statement)}`);\n        this.query(statement).forEach(f => console.log(`found: ${factToString(f)}`));\n        return;\n    }\n  }\n\n  load(input: string) {\n    const statements = this.parser.parse(input).filter((x: any) => x);\n    for (let line in statements) {\n      const statement = statements[line];\n      this.exec(statement);\n    }\n  }\n\n  loadFact(fact: Fact) {\n    if (fact.negative) {\n      this.tables[fact.table] = this.tables[fact.table].filter(row => !row.every((col, i) => equal(fact.fields[i], col)));\n      return;\n    }\n    if (!this.tables[fact.table]) {\n      this.tables[fact.table] = [];\n    }\n    if (fact.fields.some(expr => expr.type !== 'string' && expr.type !== 'integer')) {\n      throw new Entception(`facts must be grounded with strings or integers: ${factToString(fact)}`);\n    }\n    this.tables[fact.table].push(fact.fields as (String | Integer)[]);\n  }\n\n  query(query: Query): Fact[] {\n    return this.searchInferenceTree(query.query).map(b => b.facts).flat();\n  }\n\n  loadInference(inference: Inference): Fact[] {\n    const bindings = this.searchInferenceTree(inference.right);\n    const facts = bindings.map(binding => this.ground(inference.left, binding));\n    if (facts.some(fact => fact.fields.some(field => field.type === 'aggregation'))) {\n      return groupBy(facts, fact => {\n        return fact.fields\n          .filter(f => f.type === 'string' || f.type === 'integer')\n          .map(f => (f as String | Integer).value)\n          .join('-');\n      }).map(facts => {\n        const first = facts[0];\n        return {\n          type: 'fact',\n          table: first.table,\n          fields: first.fields.map((e, i) => this.aggregate(e, i, facts))\n        };\n      });\n    }\n    return facts;\n  }\n\n  aggregate(expr: Expression, index: number, groups: Fact[]): Expression {\n    switch (expr.type) {\n      case 'string':\n      case 'integer':\n        return expr;\n      case 'aggregation':\n        const args = groups.map(f => {\n          const field = f.fields[index];\n          if (field.type !== 'aggregation') {\n            throw new Entception(`TODO`);\n          }\n          return field.arguments;\n        });\n        return {\n          type: 'integer',\n          value: (args as number[][]).flat().reduce((n, c) => n + c, 0),\n        };\n      default:\n        throw new Entception(`TODO`);\n    }\n  }\n\n  ground(fact: Fact, binding: Binding): Fact {\n    return {\n      type: 'fact',\n      table: fact.table,\n      fields: fact.fields.map(expr => {\n        const result = this.evaluateExpression(expr, binding);\n        switch (typeof (result)) {\n          case 'number':\n            return {\n              type: 'integer',\n              value: result,\n            };\n          case 'string':\n            return {\n              type: 'string',\n              value: result,\n            };\n          case 'object':\n            return result;\n          default:\n            throw new Entception(`unknown expression result type ${typeof (result)}`);\n        }\n      }),\n      negative: fact.negative,\n    }\n  }\n\n  searchInferenceTree(clause: Clause): Binding[] {\n    switch (clause.type) {\n      case 'fact':\n        // facts return one binding per matching row of the table\n        return this.tables[clause.table].map(row => this.bind(row, clause)).filter(b => b !== undefined) as Binding[];\n      case 'conjunction':\n        // conjunction joins bindings into a single binding\n        let rows: Binding[][] = [];\n        this.join(clause.clauses.map(clause => this.searchInferenceTree(clause)), [], rows);\n        return rows.map(bindings => this.reduceBindings(bindings)).filter(b => b !== undefined) as Binding[];\n      case 'disjunction':\n        // disjunction concatenates bindings\n        return clause.clauses.map(clause => this.searchInferenceTree(clause)).flat();\n      case 'comparison':\n        return [{\n          facts: [] as Fact[],\n          values: {},\n          comparisons: [clause],\n        }];\n    }\n  }\n\n  join(bindings: Binding[][], group: Binding[], result: Binding[][]) {\n    if (bindings.length === 0) {\n      result.push(group)\n      return\n    }\n    const first = bindings[0];\n    const rest = bindings.slice(1);\n    for (let binding of first) {\n      this.join(rest, group.concat([binding]), result);\n    }\n  }\n\n  // reduce joins bindings together where same-named variables match\n  // it discards non-matching bindings (i.e. bindings that \"disagree on the facts\")\n  reduceBindings(bindings: Binding[]): Binding | undefined {\n    try {\n      return bindings.reduce((current, binding) => {\n        Object.keys(current.values).forEach(key => {\n          if (binding.values[key] && binding.values[key] !== current.values[key]) {\n            throw new Entception(`bindings disagree: ${binding.values[key]} != ${current.values[key]}`);\n          }\n        });\n        const newBinding = {\n          facts: current.facts.concat(binding.facts),\n          values: Object.assign(current.values, binding.values),\n          comparisons: [],\n        };\n        binding.comparisons.forEach(comparison => {\n          if (!this.compare(comparison, newBinding)) {\n            throw new Entception(`false comparison: ${clauseToString(comparison)}, ${newBinding.values}`);\n          }\n        });\n        return newBinding;\n      }, {\n        facts: [],\n        values: {},\n        comparisons: [],\n      } as Binding);\n    } catch (e) {\n      if (!(e instanceof Entception)) throw e;\n      return undefined;\n    }\n  }\n\n  bind(constants: (String | Integer)[], clause: Fact): Binding | undefined {\n    const bindings = constants.map((value, i) => {\n      const field = clause.fields[i];\n      switch (field.type) {\n        case 'string':\n        case 'integer':\n          if (value.value !== field.value) {\n            return false;\n          }\n          return [`${clause.table}[${i}]`, value.value];\n        case 'variable':\n          if (field.value === '?') {\n            return [`${clause.table}[${i}]`, value.value];\n          }\n          return [field.value, value.value];\n        default:\n          throw new Entception(`can't handle ${field.type} ${expressionToString(field)} in clause`);\n      }\n    });\n    if (bindings.some(v => !v)) return undefined;\n    return {\n      facts: [{\n        type: 'fact',\n        table: clause.table,\n        fields: constants,\n      }],\n      values: Object.fromEntries(bindings as Iterable<readonly [PropertyKey, string | number]>),\n      comparisons: [],\n    };\n  }\n\n  compare(comparison: Comparison, binding: Binding): boolean {\n    const left = this.evaluateExpression(comparison.left, binding);\n    const right = this.evaluateExpression(comparison.right, binding);\n    if (left instanceof Object || right instanceof Object) {\n      throw new Error(\"can't compare aggregations\"); // TODO\n    }\n    switch (comparison.operator) {\n      case '=':\n        return left === right;\n      case '!=':\n        return left !== right;\n      case '>':\n        return left > right;\n      case '>=':\n        return left >= right;\n      case '<':\n        return left < right;\n      case '<=':\n        return left <= right;\n    }\n  }\n\n  testClaim(claim: Claim): boolean {\n    const table = this.tables[claim.table];\n    if (table) {\n      for (const row of table) {\n        if (row.length !== claim.fields.length) continue;\n        if (claim.fields.every((field, i) => field.type === row[i].type && field.value === row[i].value)) { return true }\n      }\n    }\n    return false;\n  }\n\n  evaluateFunction(fn: Function, binding: Binding): string | number | Aggregation {\n    switch (fn.function) {\n      case 'floor':\n        const arg = this.evaluateExpression(fn.arguments[0], binding);\n        if (typeof (arg) !== 'number') {\n          throw new Entception(`floor requires numeric argument, got ${arg}`);\n        }\n        return Math.floor(arg);\n      case 'sum':\n        return {\n          type: 'aggregation',\n          function: 'sum',\n          arguments: fn.arguments.map(expr => this.evaluateExpression(expr, binding)),\n        };\n      default:\n        throw new Entception(`can't handle function ${fn.function}`)\n    }\n  }\n\n  evaluateBinaryOperation(op: BinaryOperation, binding: Binding): number {\n    const left = this.evaluateExpression(op.left, binding);\n    if (typeof (left) !== 'number') {\n      throw new Entception(`binary operation requires number on left-hand side, got ${left}`);\n    }\n    const right = this.evaluateExpression(op.right, binding);\n    if (typeof (right) !== 'number') {\n      throw new Entception(`binary operation requires number on right-hand side, got ${right}`);\n    }\n    switch (op.operator) {\n      case '+':\n        return left + right;\n      case '-':\n        return left - right;\n      case '/':\n        return left / right;\n      case '*':\n        return left * right;\n      case '^':\n        return Math.pow(left, right);\n    }\n  }\n\n  evaluateExpression(expr: Expression, binding: Binding): string | number | Aggregation {\n    switch (expr.type) {\n      case 'binary_operation':\n        return this.evaluateBinaryOperation(expr, binding);\n      case 'function':\n        return this.evaluateFunction(expr, binding);\n      case 'variable':\n        return binding.values[expr.value];\n      case 'string':\n      case 'integer':\n        return expr.value;\n      case 'aggregation':\n        return expr;\n    }\n  }\n}\n\nexport function statementToString(stmt: Statement): string {\n  switch (stmt.type) {\n    case 'claim':\n      return claimToString(stmt);\n    case 'inference':\n      return inferenceToString(stmt);\n    case 'query':\n      return queryToString(stmt);\n    default:\n      return `[${stmt.type}]`;\n  }\n}\n\nexport function inferenceToString(inf: Inference): string {\n  return `${factToString(inf.left)} :- ${clauseToString(inf.right)}.`\n}\n\nexport function queryToString(q: Query): string {\n  return `${clauseToString(q.query)}?`;\n}\n\nexport function factToString(fact: Fact): string {\n  return `${fact.negative ? '~' : ''}${fact.table}(${fact.fields.map(e => expressionToString(e)).join(', ')})`;\n}\n\nexport function clauseToString(clause: Clause): string {\n  switch (clause.type) {\n    case 'fact':\n      return factToString(clause);\n    case 'conjunction':\n      return '(' + clause.clauses.map(c => clauseToString(c)).join(' & ') + ')';\n    case 'disjunction':\n      return '(' + clause.clauses.map(c => clauseToString(c)).join(' | ') + ')';\n    case 'comparison':\n      return `${expressionToString(clause.left)} ${clause.operator} ${expressionToString(clause.right)}`;\n  }\n}\n\nexport function expressionToString(expr: Expression): string {\n  switch (expr.type) {\n    case 'string':\n      return expr.value;\n    case 'integer':\n      return expr.value.toString();\n    case 'variable':\n      return expr.value;\n    case 'binary_operation':\n      return `${expressionToString(expr.left)} ${expr.operator} ${expressionToString(expr.right)}`;\n    case 'function':\n      return `${expr.function}(${expr.arguments.map(e => expressionToString(e)).join(', ')})`;\n    case 'aggregation':\n      return `${expr.function}(${expr.arguments.map(e => {\n        if (typeof (e) === 'object') return expressionToString(e);\n        return e;\n      }).join(', ')})`;\n  }\n}\n\nexport function claimToString(claim: Claim): string {\n  return `∴ ${factToString(claim as unknown as Fact)}`;\n}\n","export default \"{\\n  function joinClauses(type, first, rest) {\\n    if (first.type === 'fact' && rest.length === 1 && (rest[0].type === 'conjunction' || rest[0].type === 'disjunction')) {\\n      rest[0].clauses.unshift(first);\\n      return rest[0];\\n    }\\n    return {\\n      type: type,\\n      clauses: [first].concat(rest),\\n    };\\n  }\\n}\\n\\nstatements\\n  = statement+\\n\\nstatement\\n  = comment:comment \\\"\\\\n\\\"? { return comment }\\n  / inference:inference \\\".\\\" { return inference }\\n  / claim:claim \\\".\\\" { return claim }\\n  / fact:fact \\\".\\\" { return fact }\\n  / query:clause \\\"?\\\" { return { type: 'query', query: query } }\\n  / [ \\\\t\\\\r\\\\n]+ { return null }\\n\\nfact\\n  = whitespace name:variable \\\"(\\\" args:arguments \\\")\\\" whitespace { return { type: 'fact', table: name.value, fields: args.arguments } }\\n  / whitespace \\\"~\\\" fact:fact { return { ...fact, negative: true } }\\n\\nexpr\\n  = addition\\n  / multiplication \\n  / function\\n  / variable\\n  / string \\n  / integer\\n\\nterm\\n  = multiplication\\n  / factor\\n\\nfactor\\n  = parenthetical_expr\\n  / function\\n  / variable\\n  / integer \\n\\naddition\\n  = left:term whitespace operator:([+\\\\-]) whitespace right:expr { return { type: 'binary_operation', operator, left, right } }\\n\\nmultiplication\\n  = left:factor whitespace operator:([*/]) whitespace right:expr { return { type: 'binary_operation', operator, left, right } }\\n\\nparenthetical_expr\\n  = \\\"(\\\" \\\" \\\"* expr:expr \\\" \\\"* \\\")\\\" { return expr }\\n\\nfunction\\n  = name:variable \\\"(\\\" args:arguments \\\")\\\" { return { type: 'function', function: name.value, arguments: args.arguments } }\\n\\narguments\\n  = whitespace first:expr rest:nextargs* whitespace { return { type: 'arguments', arguments: [first].concat(rest) } }\\n\\nnextargs\\n  = \\\",\\\" whitespace expr:expr { return expr }\\n\\ninference\\n  = left:fact \\\":-\\\" whitespace right:clause { return { type: 'inference', left, right } }\\n\\nclause\\n  = conjunction\\n  / disjunction\\n  / \\\"(\\\" whitespace clause:clause whitespace \\\")\\\" { return clause }\\n  / fact\\n  / comparison\\n\\nconjunction\\n  = \\\"(\\\" first:clause \\\")\\\" whitespace rest:next_conjunction+ { return joinClauses('conjunction', first, rest) }\\n  / first:fact rest:next_conjunction+ { return joinClauses('conjunction', first, rest) }\\n\\ndisjunction\\n  = \\\"(\\\" first:fact \\\")\\\" whitespace rest:next_disjunction+ { return joinClauses('disjunction', first, rest) }\\n  / first:fact rest:next_disjunction+ { return joinClauses('disjunction', first, rest) }\\n\\nnext_conjunction\\n  = \\\"&\\\" whitespace clause:clause { return clause }\\n\\nnext_disjunction\\n  = \\\"|\\\" whitespace clause:clause { return clause }\\n\\nclaim\\n  = \\\"∴\\\" claim:fact { return { ...claim, type: 'claim' } }\\n\\ncomparison\\n  = left:expr whitespace operator:comparison_operator whitespace right:expr { return { type: 'comparison', operator, left, right }}\\n\\ncomparison_operator\\n  = op:\\\"=\\\" { return op }\\n  / op:\\\"!=\\\" { return op }\\n  / op:\\\">\\\" { return op }\\n  / op:\\\"<\\\" { return op }\\n  / op:\\\">=\\\" { return op }\\n  / op:\\\"<=\\\" { return op }\\n\\ncomment\\n  = \\\"//\\\" comment:[^\\\\n]* { return { type: 'comment', value: comment.join('').trim() } }\\n  / \\\"/*\\\" comment:(!\\\"*/\\\" .)* \\\"*/\\\" { return { type: 'comment', value: comment.flat().join('').trim() }}\\n\\nstring\\n  = name:([A-Z][A-Za-z_]+) { return { type: 'string', value: name[0] + name[1].join('') } }\\n\\nvariable\\n  = name:([a-z_]+) { return { type: 'variable', value: name.join('') } }\\n  / \\\"?\\\" { return { type: 'variable', value: '?' } }\\n\\ninteger\\n  = negative:([-])? digits:([0-9]+) { const i = parseInt(digits.join(''), 10); return { type: 'integer', value: negative ? -i : i } }\\n\\nwhitespace\\n  = [ \\\\t\\\\r\\\\n]*\\n\";","export default \"// Auric has a Strength of 16\\nattribute(Auric, Strength, 16).\\n\\n// Auric has a Wisdom of 16\\nattribute(Auric, Wisdom, 9).\\n\\n// A character's bonus is half their attribute score minus ten\\nbonus(character, attr, floor((score-10)/2)) :- attribute(character, attr, score).\\n\\n// Therefore, Auric has a Strength bonus of 3\\n∴ bonus(Auric, Strength, 3).\\n\\n// Therefore, Auric has a Wisdom bonus of -1\\n∴ bonus(Auric, Wisdom, -1).\\n\\n// Full Plate has the clumsy tag\\ntag(FullPlate, Clumsy).\\n\\n// Auric is wearing Full Plate\\nwearing(Auric, FullPlate).\\n\\n// Given gear has a tag and the character is wearing the gear, add the tag to the character\\ntag(character, tag) :- wearing(character, gear) & tag(gear, tag).\\n\\n// Therefore Auric has the Clumsy tag\\n∴ tag(Auric, Clumsy).\\n\\n// Full Plate has a weight of 4\\nweight(FullPlate, 4).\\n\\n// Full Plate has an armor bonus of 3\\narmor(FullPlate, 3).\\n\\n// Let's give Auric a shield too\\nweight(RoundShield, 1).\\narmor(RoundShield, 1).\\nwielding(Auric, RoundShield).\\n\\n// Given a character, their armor is the sum of the armor of gear they are wearing/wielding\\narmor(character, sum(armor)) :- (wearing(character, gear) | wielding(character, gear)) & armor(gear, armor).\\n\\n// Therefore Auric has 4 armor\\n∴ armor(Auric, 4).\\n\\n// What's Auric's strength bonus again?\\nbonus(Auric, Strength, ?)?\\n\\n// A TwoHandedSword has a weight of 2\\nweight(TwoHandedSword, 2).\\n\\n// A TwoHandedSword has a damage bonus of 1\\ndamage(TwoHandedSword, 1).\\n\\n// A TwoHandedSword has the Close tag\\ntag(TwoHandedSword, Close).\\n\\n// Auric is wielding a Two Handed Sword\\nwielding(Auric, TwoHandedSword).\\n\\n// Given a character, their load is the sum of the weights of gear they are wearing and wielding\\nload(character, sum(weight)) :- (wearing(character, gear) | wielding(character, gear)) & weight(gear, weight).\\n\\n// Therefore Auric has a load of 7\\n∴ load(Auric, 7).\\n\\n// What's he wielding?\\nwielding(Auric, ?)?\\n\\n// Auric has the Barbarian class\\nclass(Auric, Barbarian).\\n\\n// The max load of a Barbarian is 8 plus their strength bonus\\nmax_load(character, 8+str) :- class(character, Barbarian) & bonus(character, Strength, str).\\n\\n// Therefore Auric's max load is 11\\n∴ max_load(Auric, 11).\\n\\n// Given a character and max load, they are tagged with Encumbered if their load is greater than their max load\\ntag(character, Encumbered) :- load(character, load) & max_load(character, max_load) & load > max_load.\\n\\n// Therefore Auric is not Encumbered\\n∴ ~tag(Auric, Encumbered).\\n\\n// Auric has the move \\\"Full Plate and Packing Steel\\\"\\nmove(Auric, FullPlateAndPackingSteel).\\n\\n// The move \\\"Full Plate and Packing Steel\\\" negates the Clumsy tag\\n~tag(character, Clumsy) :- move(character, FullPlateAndPackingSteel).\\n\\n// Auric is not Clumsy\\n∴ ~tag(Auric, Clumsy).\\n\";","import React from 'react';\nimport styled from 'astroturf/react';\n\nimport Highlight from './Highlight';\nimport Interpreter, { String, Integer } from './entmoot';\nimport example from './example.ent';\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: row;\n  margin: 24px;\n`;\n\nconst Database = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: space-between;\n`;\n\nfunction Table({ name, rows }: { name: string, rows: (String | Integer)[][] }) {\n  return <div>\n    <h1>{name}</h1>\n    <table>\n      <tbody>\n        {rows.map((row, i) => <tr key={`${name}-${i}`}>\n          {row.map((val, j) => <td key={`${name}-${i}-${j}`}>\n            {val.value}\n          </td>)}\n        </tr>)}\n      </tbody>\n    </table>\n  </div>;\n}\n\nfunction App() {\n  const interpreter = new Interpreter();\n  interpreter.load(example);\n  return <Container>\n    <Highlight language=\"entish\">{example}</Highlight>\n    <Database>\n      {Object.entries(interpreter.tables).map(([name, rows]) => <Table key={name} name={name} rows={rows} />)}\n    </Database>\n  </Container>;\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","var api = require(\"!../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../node_modules/css-loader/dist/cjs.js!./App-Container.module.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../node_modules/css-loader/dist/cjs.js!./App-Database.module.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../node_modules/css-loader/dist/cjs.js!./index.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"body {\\n  margin: 0;\\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\\n    sans-serif;\\n  -webkit-font-smoothing: antialiased;\\n  -moz-osx-font-smoothing: grayscale;\\n}\\n\\ncode {\\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\\n    monospace;\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/index.css\"],\"names\":[],\"mappings\":\"AAAA;EACE,SAAS;EACT;;cAEY;EACZ,mCAAmC;EACnC,kCAAkC;AACpC;;AAEA;EACE;aACW;AACb\",\"sourcesContent\":[\"body {\\n  margin: 0;\\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\\n    sans-serif;\\n  -webkit-font-smoothing: antialiased;\\n  -moz-osx-font-smoothing: grayscale;\\n}\\n\\ncode {\\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\\n    monospace;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n"],"sourceRoot":""}