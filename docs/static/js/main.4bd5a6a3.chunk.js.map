{"version":3,"sources":["webpack:///./src/App-Container.module.css?18f8","webpack:///./src/App-Navbar.module.css?0aad","webpack:///./src/index.css?cfe4","index.css","App-Container.module.css","App-Navbar.module.css","entmoot.ts","entish.peg","dungeon_world.ent","App.tsx","useMonacoEntish.ts","reportWebVitals.ts","index.tsx"],"names":["api","content","__esModule","default","module","i","options","exports","locals","___CSS_LOADER_EXPORT___","push","grammar","staticGrammar","Entception","Error","BindingMismatch","TODO","equal","expr1","expr2","type","rollToString","value","Interpreter","seed","parser","tables","inferences","rng","this","peg","generate","trace","seedrandom","statement","results","loadFact","console","log","factToString","inferenceToString","loadInference","claimToString","testClaim","queryToString","query","length","warn","forEach","f","clauseToString","clause","roll","input","tracer","Tracer","useColor","statements","parse","filter","x","line","exec","e","error","getBacktraceString","location","start","column","message","fact","negative","table","row","every","col","fields","some","expr","search","map","b","facts","flat","newFacts","generateRoll","inference","recursive","bindings","aggregate","left","right","binding","evaluateExpression","inf","bind","undefined","rows","join","clauses","reduceBindings","values","comparisons","group","result","first","rest","slice","concat","reduce","current","Object","keys","key","boundVariable","currBoundVariable","expressionToString","newBinding","assign","comparison","compare","constants","field","fromEntries","l","averageRoll","r","operator","op","target","outcomes","positive_outcomes","count","j","die","modifier","total","Math","floor","claim","JSON","stringify","fn","function","arg","arguments","sumArg","g","curr","probability","pow","evaluateBinaryOperation","evaluateFunction","aggregations","searchExpression","variables","array","groups","o","groupBy","v","a","q","c","comparisonToString","toString","mod","Database","Table","monaco","useMonaco","languages","register","id","setMonarchTokensProvider","defaultToken","keywords","brackets","open","close","token","tokenizer","root","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4bd5a6a3.chunk.js","sourcesContent":["var api = require(\"!../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../node_modules/css-loader/dist/cjs.js!./App-Container.module.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../node_modules/css-loader/dist/cjs.js!./App-Navbar.module.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../node_modules/css-loader/dist/cjs.js!./index.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"body {\\n  margin: 0;\\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\\n    sans-serif;\\n  -webkit-font-smoothing: antialiased;\\n  -moz-osx-font-smoothing: grayscale;\\n}\\n\\ncode {\\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\\n    monospace;\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/index.css\"],\"names\":[],\"mappings\":\"AAAA;EACE,SAAS;EACT;;cAEY;EACZ,mCAAmC;EACnC,kCAAkC;AACpC;;AAEA;EACE;aACW;AACb\",\"sourcesContent\":[\"body {\\n  margin: 0;\\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\\n    sans-serif;\\n  -webkit-font-smoothing: antialiased;\\n  -moz-osx-font-smoothing: grayscale;\\n}\\n\\ncode {\\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\\n    monospace;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"._27KvXhK1Cn3xeSy_ERUuYO { /*!*/ }\\n.iCwJ4OetHHYzpK6q4N79Q {\\n\\ndisplay: flex;\\nflex-direction: column;\\nheight: 100vh;\\nwidth: 100vw;\\n}\\n.iCwJ4OetHHYzpK6q4N79Q select {\\npadding: 5px;\\nfont-size: 0.875rem;\\nborder: 0.0625rem solid #375EAB;\\nheight: 30px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9BcHAtQ29udGFpbmVyLm1vZHVsZS5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsUUFBUSxJQUFJLEVBQUU7QUFDZDtBQUNBLGNBQWM7O0FBRWQsYUFBYTtBQUNiLHNCQUFzQjtBQUN0QixhQUFhO0FBQ2IsWUFBWTtBQVFaO0FBTkE7QUFDQSxZQUFZO0FBQ1osbUJBQW1CO0FBQ25CLCtCQUErQjtBQUMvQixZQUFZO0FBQ1oiLCJmaWxlIjoic3JjL0FwcC1Db250YWluZXIubW9kdWxlLmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5jbHMxIHsgLyohKi8gfVxuLmNsczIge1xuY29tcG9zZXM6IGNsczE7XG5cbmRpc3BsYXk6IGZsZXg7XG5mbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuaGVpZ2h0OiAxMDB2aDtcbndpZHRoOiAxMDB2dztcblxuc2VsZWN0IHtcbnBhZGRpbmc6IDVweDtcbmZvbnQtc2l6ZTogMC44NzVyZW07XG5ib3JkZXI6IDAuMDYyNXJlbSBzb2xpZCAjMzc1RUFCO1xuaGVpZ2h0OiAzMHB4O1xufVxufSJdfQ== */\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/src/App-Container.module.css\",\"webpack://./src/App-Container.module.css\"],\"names\":[],\"mappings\":\"AAAA,2BAAQ,IAAI,EAAE;AACd;;AAGA,aAAa;AACb,sBAAsB;AACtB,aAAa;AACb,YAAY;AAQZ;AANA;AACA,YAAY;AACZ,mBAAmB;AACnB,+BAA+B;AAC/B,YAAY;AACZ;ACCA,gtBAAgtB\",\"sourcesContent\":[\".cls1 { /*!*/ }\\n.cls2 {\\ncomposes: cls1;\\n\\ndisplay: flex;\\nflex-direction: column;\\nheight: 100vh;\\nwidth: 100vw;\\n\\nselect {\\npadding: 5px;\\nfont-size: 0.875rem;\\nborder: 0.0625rem solid #375EAB;\\nheight: 30px;\\n}\\n}\",\".cls1 { /*!*/ }\\n.cls2 {\\ncomposes: cls1;\\n\\ndisplay: flex;\\nflex-direction: column;\\nheight: 100vh;\\nwidth: 100vw;\\n}\\n.cls2 select {\\npadding: 5px;\\nfont-size: 0.875rem;\\nborder: 0.0625rem solid #375EAB;\\nheight: 30px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9BcHAtQ29udGFpbmVyLm1vZHVsZS5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsUUFBUSxJQUFJLEVBQUU7QUFDZDtBQUNBLGNBQWM7O0FBRWQsYUFBYTtBQUNiLHNCQUFzQjtBQUN0QixhQUFhO0FBQ2IsWUFBWTtBQVFaO0FBTkE7QUFDQSxZQUFZO0FBQ1osbUJBQW1CO0FBQ25CLCtCQUErQjtBQUMvQixZQUFZO0FBQ1oiLCJmaWxlIjoic3JjL0FwcC1Db250YWluZXIubW9kdWxlLmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5jbHMxIHsgLyohKi8gfVxuLmNsczIge1xuY29tcG9zZXM6IGNsczE7XG5cbmRpc3BsYXk6IGZsZXg7XG5mbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuaGVpZ2h0OiAxMDB2aDtcbndpZHRoOiAxMDB2dztcblxuc2VsZWN0IHtcbnBhZGRpbmc6IDVweDtcbmZvbnQtc2l6ZTogMC44NzVyZW07XG5ib3JkZXI6IDAuMDYyNXJlbSBzb2xpZCAjMzc1RUFCO1xuaGVpZ2h0OiAzMHB4O1xufVxufSJdfQ== */\"],\"sourceRoot\":\"\"}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t\"cls1\": \"_27KvXhK1Cn3xeSy_ERUuYO\",\n\t\"cls2\": \"iCwJ4OetHHYzpK6q4N79Q _27KvXhK1Cn3xeSy_ERUuYO\"\n};\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".WlLYDOQAi_2gHMRjpYz2k { /*!*/ }\\n._2GZvzmSPqaENq77rUojI56 {\\n\\ndisplay: flex;\\nflex-direction: row;\\nalign-items: center;\\npadding: 10px 16px 10px 16px;\\nbackground-color: #E0EBF5;\\n}\\n._2GZvzmSPqaENq77rUojI56 h1 {\\nmargin-right: 16px;\\nfont-size: 20px;\\nfont-family: sans-serif;\\n}\\n._2GZvzmSPqaENq77rUojI56 * {\\nmargin-top: 10px;\\nmargin-bottom: 10px;\\nmargin-right: 12px;\\nborder-radius: 5px;\\nbox-sizing: border-box;\\n}\\n._2GZvzmSPqaENq77rUojI56 button {\\nborder: 1px solid #375EAB;\\nfont-size: 16px;\\nfont-family: sans-serif;\\nbackground: #375EAB;\\ncolor: white;\\nheight: 30px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9BcHAtTmF2YmFyLm1vZHVsZS5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsUUFBUSxJQUFJLEVBQUU7QUFDZDtBQUNBLGNBQWM7O0FBRWQsYUFBYTtBQUNiLG1CQUFtQjtBQUNuQixtQkFBbUI7QUFDbkIsNEJBQTRCO0FBQzVCLHlCQUF5QjtBQXdCekI7QUF0QkE7QUFDQSxrQkFBa0I7QUFDbEIsZUFBZTtBQUNmLHVCQUF1QjtBQUN2QjtBQUVBO0FBQ0EsZ0JBQWdCO0FBQ2hCLG1CQUFtQjtBQUNuQixrQkFBa0I7QUFDbEIsa0JBQWtCO0FBQ2xCLHNCQUFzQjtBQUN0QjtBQUVBO0FBQ0EseUJBQXlCO0FBQ3pCLGVBQWU7QUFDZix1QkFBdUI7QUFDdkIsbUJBQW1CO0FBQ25CLFlBQVk7QUFDWixZQUFZO0FBQ1oiLCJmaWxlIjoic3JjL0FwcC1OYXZiYXIubW9kdWxlLmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5jbHMxIHsgLyohKi8gfVxuLmNsczIge1xuY29tcG9zZXM6IGNsczE7XG5cbmRpc3BsYXk6IGZsZXg7XG5mbGV4LWRpcmVjdGlvbjogcm93O1xuYWxpZ24taXRlbXM6IGNlbnRlcjtcbnBhZGRpbmc6IDEwcHggMTZweCAxMHB4IDE2cHg7XG5iYWNrZ3JvdW5kLWNvbG9yOiAjRTBFQkY1O1xuXG5oMSB7XG5tYXJnaW4tcmlnaHQ6IDE2cHg7XG5mb250LXNpemU6IDIwcHg7XG5mb250LWZhbWlseTogc2Fucy1zZXJpZjtcbn1cblxuKiB7XG5tYXJnaW4tdG9wOiAxMHB4O1xubWFyZ2luLWJvdHRvbTogMTBweDtcbm1hcmdpbi1yaWdodDogMTJweDtcbmJvcmRlci1yYWRpdXM6IDVweDtcbmJveC1zaXppbmc6IGJvcmRlci1ib3g7XG59XG5cbmJ1dHRvbiB7XG5ib3JkZXI6IDFweCBzb2xpZCAjMzc1RUFCO1xuZm9udC1zaXplOiAxNnB4O1xuZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7XG5iYWNrZ3JvdW5kOiAjMzc1RUFCO1xuY29sb3I6IHdoaXRlO1xuaGVpZ2h0OiAzMHB4O1xufVxufSJdfQ== */\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/src/App-Navbar.module.css\",\"webpack://./src/App-Navbar.module.css\"],\"names\":[],\"mappings\":\"AAAA,yBAAQ,IAAI,EAAE;AACd;;AAGA,aAAa;AACb,mBAAmB;AACnB,mBAAmB;AACnB,4BAA4B;AAC5B,yBAAyB;AAwBzB;AAtBA;AACA,kBAAkB;AAClB,eAAe;AACf,uBAAuB;AACvB;AAEA;AACA,gBAAgB;AAChB,mBAAmB;AACnB,kBAAkB;AAClB,kBAAkB;AAClB,sBAAsB;AACtB;AAEA;AACA,yBAAyB;AACzB,eAAe;AACf,uBAAuB;AACvB,mBAAmB;AACnB,YAAY;AACZ,YAAY;AACZ;ACDA,wxCAAwxC\",\"sourcesContent\":[\".cls1 { /*!*/ }\\n.cls2 {\\ncomposes: cls1;\\n\\ndisplay: flex;\\nflex-direction: row;\\nalign-items: center;\\npadding: 10px 16px 10px 16px;\\nbackground-color: #E0EBF5;\\n\\nh1 {\\nmargin-right: 16px;\\nfont-size: 20px;\\nfont-family: sans-serif;\\n}\\n\\n* {\\nmargin-top: 10px;\\nmargin-bottom: 10px;\\nmargin-right: 12px;\\nborder-radius: 5px;\\nbox-sizing: border-box;\\n}\\n\\nbutton {\\nborder: 1px solid #375EAB;\\nfont-size: 16px;\\nfont-family: sans-serif;\\nbackground: #375EAB;\\ncolor: white;\\nheight: 30px;\\n}\\n}\",\".cls1 { /*!*/ }\\n.cls2 {\\ncomposes: cls1;\\n\\ndisplay: flex;\\nflex-direction: row;\\nalign-items: center;\\npadding: 10px 16px 10px 16px;\\nbackground-color: #E0EBF5;\\n}\\n.cls2 h1 {\\nmargin-right: 16px;\\nfont-size: 20px;\\nfont-family: sans-serif;\\n}\\n.cls2 * {\\nmargin-top: 10px;\\nmargin-bottom: 10px;\\nmargin-right: 12px;\\nborder-radius: 5px;\\nbox-sizing: border-box;\\n}\\n.cls2 button {\\nborder: 1px solid #375EAB;\\nfont-size: 16px;\\nfont-family: sans-serif;\\nbackground: #375EAB;\\ncolor: white;\\nheight: 30px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9BcHAtTmF2YmFyLm1vZHVsZS5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsUUFBUSxJQUFJLEVBQUU7QUFDZDtBQUNBLGNBQWM7O0FBRWQsYUFBYTtBQUNiLG1CQUFtQjtBQUNuQixtQkFBbUI7QUFDbkIsNEJBQTRCO0FBQzVCLHlCQUF5QjtBQXdCekI7QUF0QkE7QUFDQSxrQkFBa0I7QUFDbEIsZUFBZTtBQUNmLHVCQUF1QjtBQUN2QjtBQUVBO0FBQ0EsZ0JBQWdCO0FBQ2hCLG1CQUFtQjtBQUNuQixrQkFBa0I7QUFDbEIsa0JBQWtCO0FBQ2xCLHNCQUFzQjtBQUN0QjtBQUVBO0FBQ0EseUJBQXlCO0FBQ3pCLGVBQWU7QUFDZix1QkFBdUI7QUFDdkIsbUJBQW1CO0FBQ25CLFlBQVk7QUFDWixZQUFZO0FBQ1oiLCJmaWxlIjoic3JjL0FwcC1OYXZiYXIubW9kdWxlLmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5jbHMxIHsgLyohKi8gfVxuLmNsczIge1xuY29tcG9zZXM6IGNsczE7XG5cbmRpc3BsYXk6IGZsZXg7XG5mbGV4LWRpcmVjdGlvbjogcm93O1xuYWxpZ24taXRlbXM6IGNlbnRlcjtcbnBhZGRpbmc6IDEwcHggMTZweCAxMHB4IDE2cHg7XG5iYWNrZ3JvdW5kLWNvbG9yOiAjRTBFQkY1O1xuXG5oMSB7XG5tYXJnaW4tcmlnaHQ6IDE2cHg7XG5mb250LXNpemU6IDIwcHg7XG5mb250LWZhbWlseTogc2Fucy1zZXJpZjtcbn1cblxuKiB7XG5tYXJnaW4tdG9wOiAxMHB4O1xubWFyZ2luLWJvdHRvbTogMTBweDtcbm1hcmdpbi1yaWdodDogMTJweDtcbmJvcmRlci1yYWRpdXM6IDVweDtcbmJveC1zaXppbmc6IGJvcmRlci1ib3g7XG59XG5cbmJ1dHRvbiB7XG5ib3JkZXI6IDFweCBzb2xpZCAjMzc1RUFCO1xuZm9udC1zaXplOiAxNnB4O1xuZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7XG5iYWNrZ3JvdW5kOiAjMzc1RUFCO1xuY29sb3I6IHdoaXRlO1xuaGVpZ2h0OiAzMHB4O1xufVxufSJdfQ== */\"],\"sourceRoot\":\"\"}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t\"cls1\": \"WlLYDOQAi_2gHMRjpYz2k\",\n\t\"cls2\": \"_2GZvzmSPqaENq77rUojI56 WlLYDOQAi_2gHMRjpYz2k\"\n};\nexport default ___CSS_LOADER_EXPORT___;\n","import peg from 'pegjs';\nimport staticGrammar from './entish.peg';\nimport seedrandom from 'seedrandom';\nimport Tracer from 'pegjs-backtrace';\n\nlet grammar: string;\nif (staticGrammar === 'entish.peg') {\n  // Just so jest can access non-js resources\n  const fs = require('fs');\n  grammar = fs.readFileSync('./src/entish.peg').toString();\n} else {\n  grammar = staticGrammar;\n}\n\nexport type Statement = Comment | Fact | Inference | Claim | Rolling | Query\n\nexport type Comment = {\n  type: 'comment'\n  value: string\n}\n\nexport type Fact = {\n  type: 'fact'\n  table: string\n  fields: Expression[]\n  negative?: boolean\n}\n\nexport type Inference = {\n  type: 'inference'\n  left: Fact\n  right: Conjunction | Disjunction\n}\n\nexport type Clause = Fact | Conjunction | Disjunction | Comparison\n\nexport type Conjunction = {\n  type: 'conjunction'\n  clauses: Clause[]\n}\n\nexport type Disjunction = {\n  type: 'disjunction'\n  clauses: Clause[]\n}\n\nexport type Comparison = {\n  type: 'comparison'\n  operator: ComparisonOperator\n  left: Expression\n  right: Expression\n}\n\nexport type ComparisonOperator = '=' | '>' | '<' | '>=' | '<=' | '!='\n\nexport type Claim = {\n  type: 'claim'\n  clause: Clause\n}\n\nexport type Rolling = {\n  type: 'rolling'\n  clause: Clause\n}\n\nexport type Query = {\n  type: 'query'\n  clause: Clause\n}\n\nexport type Expression = Constant | Function | BinaryOperation | Variable | Comparison\n\nexport type Constant = Boolean | String | Number | Roll\n\nexport type BinaryOperation = {\n  type: 'binary_operation'\n  left: Expression\n  right: Expression\n  operator: '+' | '-' | '*' | '/' | '^'\n}\n\nexport type Function = {\n  type: 'function'\n  function: 'floor' | 'sum' | 'count' | 'probability'\n  arguments: Expression[]\n}\n\nexport type Boolean = {\n  type: 'boolean'\n  value: boolean\n}\n\nexport type String = {\n  type: 'string'\n  value: string\n}\n\nexport type Variable = {\n  type: 'variable'\n  value: string\n}\n\nexport type Number = {\n  type: 'number'\n  value: number\n}\n\nexport type Roll = {\n  type: 'roll'\n  count: number\n  die: number\n  modifier: number\n}\n\nexport type Binding = {\n  facts: Fact[]\n  values: { [key: string]: Constant | undefined }\n  comparisons: Comparison[]\n  group?: Binding[]\n}\n\nexport class Entception extends Error { }\n\nexport class BindingMismatch extends Error { }\n\nexport class TODO extends Error { }\n\nfunction groupBy<T>(array: T[], f: (o: T) => string) {\n  const groups: { [key: string]: T[] } = {};\n  array.forEach(o => {\n    const group = f(o);\n    groups[group] = groups[group] || [];\n    groups[group].push(o);\n  });\n  return Object.keys(groups).map(group => groups[group]);\n}\n\nfunction equal(expr1: Expression, expr2: Expression): boolean {\n  if (expr1.type !== expr2.type) return false;\n  if (expr1.type === 'roll' && expr2.type === 'roll') return rollToString(expr1) === rollToString(expr2);\n  if ('value' in expr1 && 'value' in expr2) return expr1.value === expr2.value;\n  throw new Entception(`incomparable types: ${expr1.type} and ${expr2.type}`);\n}\n\nexport default class Interpreter {\n\n  parser: PEG.Parser;\n  tables: { [key: string]: Constant[][] } = {}\n  inferences: Inference[] = []\n  rng: () => number\n\n  constructor(seed: string) {\n    this.parser = peg.generate(grammar, { trace: true });\n    this.rng = seedrandom(seed);\n  }\n\n  exec(statement: Statement) {\n    let results;\n    switch (statement.type) {\n      case 'comment':\n        return;\n      case 'fact':\n        this.loadFact(statement);\n        console.log(`added ${factToString(statement)}`);\n        return;\n      case 'inference':\n        console.log(`inferring ${inferenceToString(statement)}`);\n        this.loadInference(statement);\n        return;\n      case 'claim':\n        console.log(`testing ${claimToString(statement)}`)\n        if (!this.testClaim(statement)) {\n          throw new Entception(`false claim: ${claimToString(statement)}`);\n        } else {\n          console.log(`verified ${claimToString(statement)}`);\n        }\n        return;\n      case 'query':\n        console.log(`query: ${queryToString(statement)}`);\n        results = this.query(statement);\n        if (results.length === 0) console.warn('no matching facts found');\n        results.forEach(f => console.log(`found: ${factToString(f)}`));\n        return;\n      case 'rolling':\n        console.log(`rolling: ${rollingToString(statement)}`);\n        results = this.roll(statement);\n        if (results.length === 0) console.warn('no rolls found');\n        results.forEach(f => console.log(`rolled: ${factToString(f)}`));\n        return;\n      default:\n        throw new TODO(`unhandled statement type: ${(statement as any).type}`);\n    }\n  }\n\n  load(input: string) {\n    const tracer = new Tracer(input, { useColor: false });\n    try {\n      const statements = this.parser.parse(input, { tracer: tracer }).filter((x: any) => x);\n      for (let line in statements) {\n        const statement = statements[line];\n        this.exec(statement);\n      }\n    } catch (e) {\n      if ('location' in e) {\n        console.error(tracer.getBacktraceString());\n        throw new Error(`line ${e.location.start.line} Column ${e.location.start.column}: ${e.message}`);\n      } else {\n        console.error(e);\n        throw e;\n      }\n    }\n  }\n\n  loadFact(fact: Fact) {\n    if (fact.negative) {\n      this.tables[fact.table] = this.tables[fact.table].filter(row => !row.every((col, i) => equal(fact.fields[i], col)));\n      return;\n    }\n    if (!this.tables[fact.table]) {\n      this.tables[fact.table] = [];\n    }\n    if (fact.fields.some(expr => expr.type !== 'string' && expr.type !== 'number' && expr.type !== 'roll')) {\n      throw new Entception(`facts must be grounded with strings or numbers: ${factToString(fact)}`);\n    }\n    if (!this.tables[fact.table].some(e => e.every((f, i) => equal(f, fact.fields[i])))) {\n      this.tables[fact.table].push(fact.fields as Constant[]);\n      this.inferences.forEach(i => this.loadInference(i, true));\n    }\n  }\n\n  query(query: Query): Fact[] {\n    return this.search(query.clause).map(b => b.facts).flat();\n  }\n\n  roll(roll: Rolling): Fact[] {\n    const newFacts: Fact[] = this.search(roll.clause).map(b => b.facts).flat().map(fact => {\n      return {\n        type: 'fact',\n        table: fact.table,\n        fields: fact.fields.map(f => f.type === 'roll' ? this.generateRoll(f) : f),\n      };\n    });\n    newFacts.forEach(fact => this.loadFact(fact));\n    return newFacts;\n  }\n\n  loadInference(inference: Inference, recursive: boolean = false) {\n    const bindings = this.aggregate(inference.left, this.search(inference.right));\n    const facts: Fact[] = bindings.map(binding => {\n      return {\n        type: 'fact',\n        table: inference.left.table,\n        negative: inference.left.negative,\n        fields: inference.left.fields.map(f => this.evaluateExpression(f, binding)),\n      };\n    });\n    facts.forEach(f => this.loadFact(f));\n    if (!recursive && !this.inferences.some(inf => inferenceToString(inf) === inferenceToString(inference))) {\n      this.inferences.push(inference);\n    }\n  }\n\n  search(clause: Clause): Binding[] {\n    switch (clause.type) {\n      case 'fact':\n        // facts return one binding per matching row of the table\n        return (this.tables[clause.table] || []).map(row => this.bind(row, clause)).filter(b => b !== undefined) as Binding[];\n      case 'conjunction':\n        // conjunction joins bindings into a single binding\n        let rows: Binding[][] = [];\n        this.join(clause.clauses.map(clause => this.search(clause)), [], rows);\n        return rows.map(bindings => this.reduceBindings(bindings)).filter(b => b !== undefined) as Binding[];\n      case 'disjunction':\n        // disjunction concatenates bindings\n        return clause.clauses.map(clause => this.search(clause)).flat();\n      case 'comparison':\n        return [{\n          facts: [] as Fact[],\n          values: {},\n          comparisons: [clause],\n        }];\n    }\n  }\n\n  join(bindings: Binding[][], group: Binding[], result: Binding[][]) {\n    if (bindings.length === 0) {\n      result.push(group)\n      return\n    }\n    const first = bindings[0];\n    const rest = bindings.slice(1);\n    for (let binding of first) {\n      this.join(rest, group.concat([binding]), result);\n    }\n  }\n\n  // reduce joins bindings together where same-named variables match\n  // it discards non-matching bindings (i.e. bindings that \"disagree on the facts\")\n  reduceBindings(bindings: Binding[]): Binding | undefined {\n    try {\n      return bindings.reduce((current, binding) => {\n        Object.keys(current.values).forEach(key => {\n          const boundVariable = binding.values[key];\n          const currBoundVariable = current.values[key];\n          if (boundVariable === undefined || currBoundVariable === undefined) return;\n          if (!equal(boundVariable, currBoundVariable)) {\n            throw new BindingMismatch(`bindings disagree: ${expressionToString(boundVariable)} != ${expressionToString(currBoundVariable)}`);\n          }\n        });\n        const newBinding = {\n          facts: current.facts.concat(binding.facts),\n          values: Object.assign(current.values, binding.values),\n          comparisons: binding.comparisons,\n        };\n        binding.comparisons.forEach(comparison => {\n          if (!this.compare(comparison, newBinding)) {\n            throw new BindingMismatch(`false comparison: ${clauseToString(comparison)}, ${newBinding.values}`);\n          }\n        });\n        return newBinding;\n      }, {\n        facts: [],\n        values: {},\n        comparisons: [],\n      } as Binding);\n    } catch (e) {\n      if (e instanceof BindingMismatch) return undefined;\n      throw e;\n    }\n  }\n\n  bind(constants: Constant[], clause: Fact): Binding | undefined {\n    try {\n      const bindings = constants.map((value, i) => {\n        const field = clause.fields[i];\n        switch (field.type) {\n          case 'string':\n          case 'number':\n          case 'roll':\n            if (!equal(value, field)) {\n              throw new BindingMismatch(`binding mismatch: ${value} != ${field}`);\n            }\n            return [`${clause.table}[${i}]`, value];\n          case 'variable':\n            if (field.value === '?') {\n              return [`${clause.table}[${i}]`, value];\n            }\n            return [field.value, value];\n          default:\n            throw new Entception(`can't handle ${field.type} ${expressionToString(field)} in clause`);\n        }\n      });\n      return {\n        facts: [{\n          type: 'fact',\n          table: clause.table,\n          fields: constants,\n        }],\n        values: Object.fromEntries(bindings),\n        comparisons: [],\n      };\n    } catch (e) {\n      if (e instanceof BindingMismatch) return undefined;\n      throw e;\n    }\n  }\n\n  compare(comparison: Comparison, binding: Binding): boolean {\n    const left = this.evaluateExpression(comparison.left, binding);\n    const right = this.evaluateExpression(comparison.right, binding);\n    const l = left.type === 'roll' ? this.averageRoll(left) : left.value;\n    const r = right.type === 'roll' ? this.averageRoll(right) : right.value;\n    switch (comparison.operator) {\n      case '=':\n        return l === r;\n      case '!=':\n        return l !== r;\n      case '>':\n        return l > r;\n      case '>=':\n        return l >= r;\n      case '<':\n        return l < r;\n      case '<=':\n        return l <= r;\n    }\n  }\n\n  probability(roll: Roll, op: ComparisonOperator, target: number): number {\n    let outcomes = 0;\n    let positive_outcomes = 0;\n    for (let i = 0; i < roll.count; i++) {\n      for (let j = 1; j <= roll.die; j++) {\n        const r = j + roll.modifier;\n        outcomes++;\n        switch (op) {\n          case '=':\n            if (r === target) positive_outcomes++;\n            break;\n          case '!=':\n            if (r !== target) positive_outcomes++;\n            break;\n          case '>=':\n            if (r >= target) positive_outcomes++;\n            break;\n          case '<=':\n            if (r <= target) positive_outcomes++;\n            break;\n          case '>':\n            if (r > target) positive_outcomes++;\n            break;\n          case '<':\n            if (r < target) positive_outcomes++;\n            break;\n        }\n      }\n    }\n    return positive_outcomes / outcomes;\n  }\n\n  averageRoll(roll: Roll): number {\n    let total = 0;\n    for (let i = 0; i < roll.count; i++) {\n      total += Math.floor(0.5 * roll.die) + 1 + roll.modifier;\n    }\n    return total;\n  }\n\n  generateRoll(roll: Roll): Number {\n    let total = 0;\n    for (let i = 0; i < roll.count; i++) {\n      total += Math.floor(this.rng() * roll.die) + 1 + roll.modifier;\n    }\n    return {\n      type: 'number',\n      value: total,\n    };\n  }\n\n  testClaim(claim: Claim): boolean {\n    if (claim.clause.type === 'fact') {\n      const table = this.tables[claim.clause.table];\n      if (table) {\n        for (const row of table) {\n          if (row.length !== claim.clause.fields.length) continue;\n          if (claim.clause.fields.every((field, i) => field.type === row[i].type && JSON.stringify(field) === JSON.stringify(row[i]))) { return !claim.clause.negative }\n        }\n      }\n      return !!claim.clause.negative;\n    } else if (claim.clause.type === 'conjunction') {\n      const bindings = this.search(claim.clause);\n      return bindings.length > 0;\n    } else if (claim.clause.type === 'comparison') {\n      const result = this.evaluateExpression(claim.clause, { facts: [], values: {}, comparisons: [] });\n      if (result.type === 'boolean') return result.value;\n    }\n    throw new Entception(`can't verify claims of type ${claim.clause.type}`);\n  }\n\n  evaluateFunction(fn: Function, binding: Binding): Constant {\n    switch (fn.function) {\n      case 'floor':\n        const arg = this.evaluateExpression(fn.arguments[0], binding);\n        if (arg.type !== 'number') {\n          throw new Entception(`floor requires numeric argument, got ${arg.type}`);\n        }\n        return { type: 'number', value: Math.floor(arg.value) };\n      case 'sum':\n        if (binding.group === undefined) {\n          return {\n            type: 'number',\n            value: 0\n          };\n        }\n        const sumArg = fn.arguments[0];\n        if (sumArg.type !== 'variable') {\n          throw new Entception(`sum function requires a single variable argument, got ${sumArg.type}`);\n        }\n        return {\n          type: 'number',\n          value: binding.group.map(g => g.values[sumArg.value]).reduce((total, curr) => {\n            if (curr === undefined) return total;\n            if (curr.type === 'roll') return total;\n            if (curr.type !== 'number') throw new Entception(`sum got a non-numerical argument, ${sumArg.value} = ${curr.type}`);\n            return total + curr.value;\n          }, 0),\n        };\n      case 'probability':\n        if (fn.arguments[0].type === 'comparison') {\n          const roll = this.evaluateExpression(fn.arguments[0].left, binding);\n          const operator = fn.arguments[0].operator;\n          const target = this.evaluateExpression(fn.arguments[0].right, binding);\n          if (roll.type !== 'roll' || target.type !== 'number') {\n            throw new Entception(`can't compute probability for ${fn.arguments[0]}`);\n          }\n          return { type: 'number', value: this.probability(roll, operator, target.value) };\n        } else {\n          const roll = this.evaluateExpression(fn.arguments[0], binding);\n          if (roll.type !== 'roll') throw new Entception(`first argument to probability function must be a roll`);\n          return roll;\n        }\n      case 'count':\n      default:\n        throw new TODO();\n    }\n  }\n\n  evaluateBinaryOperation(op: BinaryOperation, binding: Binding): number {\n    const left = this.evaluateExpression(op.left, binding);\n    if (left.type !== 'number') {\n      throw new Entception(`binary operation requires number on left-hand side, got ${left.type}`);\n    }\n    const right = this.evaluateExpression(op.right, binding);\n    if (right.type !== 'number') {\n      throw new Entception(`binary operation requires number on right-hand side, got ${right.type}`);\n    }\n    switch (op.operator) {\n      case '+':\n        return left.value + right.value;\n      case '-':\n        return left.value - right.value;\n      case '/':\n        return left.value / right.value;\n      case '*':\n        return left.value * right.value;\n      case '^':\n        return Math.pow(left.value, right.value);\n    }\n  }\n\n  evaluateExpression(expr: Expression, binding: Binding): Constant {\n    switch (expr.type) {\n      case 'binary_operation':\n        return { type: 'number', value: this.evaluateBinaryOperation(expr, binding) };\n      case 'function':\n        return this.evaluateFunction(expr, binding);\n      case 'variable':\n        const boundVariable = binding.values[expr.value];\n        if (boundVariable === undefined) {\n          throw new Entception(`variable ${expr.value} missing from binding`);\n        }\n        return boundVariable;\n      case 'comparison':\n        return { type: 'boolean', value: this.compare(expr, binding) };\n      case 'boolean':\n      case 'string':\n      case 'number':\n      case 'roll':\n        return expr;\n      default:\n        throw new Entception(`unhandled expression type ${(expr as any).type}`);\n    }\n  }\n\n  aggregate(fact: Fact, bindings: Binding[]): Binding[] {\n    const aggregations = fact.fields.map(e => this.searchExpression(e, e => {\n      if (e.type === 'function' && e.function === 'sum') return e;\n      return undefined;\n    })).flat().filter(e => e !== undefined) as Function[];\n    const variables = fact.fields.map(e => this.searchExpression(e, e => {\n      if (e.type === 'function' && e.function === 'sum') return false;\n      if (e.type === 'variable') return e;\n      return undefined;\n    })).flat().filter(e => e !== undefined) as Variable[];\n    if (aggregations.length === 0) {\n      return bindings;\n    }\n    const groups = groupBy(bindings, b => {\n      const group = Object.fromEntries(variables.map(v => [v.value, b.values[v.value]]));\n      return JSON.stringify(group);\n    });\n    return groups.map(g => {\n      return {\n        facts: g.map(b => b.facts).flat(),\n        values: g[0].values,\n        comparisons: g.map(b => b.comparisons).flat(),\n        group: g,\n      };\n    });\n  }\n\n  searchExpression<T>(expr: Expression, fn: (expr: Expression) => (T | undefined | false)): T[] {\n    const result = fn(expr);\n    if (result === false) return [];\n    const a = result === undefined ? [] : [result];\n    switch (expr.type) {\n      case 'boolean':\n      case 'number':\n      case 'roll':\n      case 'variable':\n      case 'string':\n        return a;\n      case 'comparison':\n        return a.concat(this.searchExpression(expr.left, fn).concat(this.searchExpression(expr.right, fn)));\n      case 'binary_operation':\n        return a.concat(this.searchExpression(expr.left, fn).concat(this.searchExpression(expr.right, fn)));\n      case 'function':\n        return a.concat(expr.arguments.map(e => this.searchExpression(e, fn)).flat());\n    }\n  }\n}\n\nexport function statementToString(stmt: Statement): string {\n  switch (stmt.type) {\n    case 'claim':\n      return claimToString(stmt);\n    case 'inference':\n      return inferenceToString(stmt);\n    case 'query':\n      return queryToString(stmt);\n    default:\n      return `[${stmt.type}]`;\n  }\n}\n\nexport function inferenceToString(inf: Inference): string {\n  return `${factToString(inf.left)} :- ${clauseToString(inf.right)}.`\n}\n\nexport function queryToString(q: Query): string {\n  return `${clauseToString(q.clause)}?`;\n}\n\nexport function factToString(fact: Fact): string {\n  return `${fact.negative ? '~' : ''}${fact.table}(${fact.fields.map(e => expressionToString(e)).join(', ')})`;\n}\n\nexport function clauseToString(clause: Clause): string {\n  switch (clause.type) {\n    case 'fact':\n      return factToString(clause);\n    case 'conjunction':\n      return '(' + clause.clauses.map(c => clauseToString(c)).join(' & ') + ')';\n    case 'disjunction':\n      return '(' + clause.clauses.map(c => clauseToString(c)).join(' | ') + ')';\n    case 'comparison':\n      return comparisonToString(clause);\n  }\n}\n\nexport function expressionToString(expr: Expression): string {\n  switch (expr.type) {\n    case 'boolean':\n      return expr.value.toString();\n    case 'string':\n      return expr.value;\n    case 'number':\n      return expr.value.toString();\n    case 'roll':\n      return rollToString(expr);\n    case 'variable':\n      return expr.value;\n    case 'binary_operation':\n      return `${expressionToString(expr.left)} ${expr.operator} ${expressionToString(expr.right)}`;\n    case 'function':\n      return `${expr.function}(${expr.arguments.map(e => expressionToString(e)).join(', ')})`;\n    case 'comparison':\n      return comparisonToString(expr);\n  }\n}\n\nexport function comparisonToString(comparison: Comparison): string {\n  return `${expressionToString(comparison.left)} ${comparison.operator} ${expressionToString(comparison.right)}`;\n}\n\nexport function rollToString(roll: Roll): string {\n  const mod = roll.modifier > 0 ? `+${roll.modifier}` : roll.modifier < 0 ? `-${roll.modifier}` : '';\n  return `${roll.count}d${roll.die}${mod}`;\n}\n\nexport function claimToString(claim: Claim): string {\n  return `∴ ${clauseToString(claim.clause)}`;\n}\n\nexport function rollingToString(roll: Rolling): string {\n  return `🎲 ${clauseToString(roll.clause)}`;\n}\n","export default \"{\\n  function joinClauses(type, first, rest) {\\n    if (first.type === 'fact' && rest.length === 1 && (rest[0].type === 'conjunction' || rest[0].type === 'disjunction')) {\\n      rest[0].clauses.unshift(first);\\n      return rest[0];\\n    }\\n    return {\\n      type: type,\\n      clauses: [first].concat(rest),\\n    };\\n  }\\n  function comparisonTree(left, rest) {\\n    const right = rest.shift();\\n    const node = { type: 'comparison', left, operator: right.operator, right: right.expr };\\n    if (rest.length === 0) {\\n      return node;\\n    }\\n    return comparisonTree(node, rest);\\n  }\\n  function flatten(arr) {\\n    return arr.reduce((acc, cur) => acc.concat(Array.isArray(cur) ? flatten(cur) : cur), []);\\n  };\\n  function parseNumber(n) {\\n    return parseFloat(flatten(n).filter(d => d).join(''));\\n  }\\n}\\n\\nstatements\\n  = statement+\\n\\nstatement\\n  = comment:comment \\\"\\\\n\\\"? { return comment }\\n  / inference:inference \\\".\\\" { return inference }\\n  / claim:claim \\\".\\\" { return claim }\\n  / fact:fact \\\".\\\" { return fact }\\n  / roll:rolling \\\".\\\" { return roll}\\n  / \\\"?\\\" query:clause \\\".\\\" { return { type: 'query', clause: query } }\\n  / [ \\\\t\\\\r\\\\n]+ { return null }\\n\\nfact\\n  = whitespace name:variable \\\"(\\\" args:arguments \\\")\\\" whitespace { return { type: 'fact', table: name.value, fields: args.arguments } }\\n  / whitespace \\\"~\\\" fact:fact { return { ...fact, negative: true } }\\n\\nexpr\\n  = addition\\n  / multiplication \\n  / probability\\n  / function\\n  / \\\"(\\\" comparison \\\")\\\"\\n  / variable\\n  / roll\\n  / string \\n  / number\\n\\nterm\\n  = multiplication\\n  / factor\\n\\nfactor\\n  = parenthetical_expr\\n  / function\\n  / variable\\n  / number \\n\\naddition\\n  = left:term whitespace operator:([+\\\\-]) whitespace right:expr { return { type: 'binary_operation', operator, left, right } }\\n\\nmultiplication\\n  = left:factor whitespace operator:([*/]) whitespace right:expr { return { type: 'binary_operation', operator, left, right } }\\n\\nparenthetical_expr\\n  = \\\"(\\\" \\\" \\\"* expr:expr \\\" \\\"* \\\")\\\" { return expr }\\n\\nfunction\\n  = name:variable \\\"(\\\" args:arguments \\\")\\\" { return { type: 'function', function: name.value, arguments: args.arguments } }\\n\\narguments\\n  = whitespace first:expr rest:nextargs* whitespace { return { type: 'arguments', arguments: [first].concat(rest) } }\\n\\nnextargs\\n  = \\\",\\\" whitespace expr:expr { return expr }\\n\\nprobability\\n  = \\\"Pr(\\\" whitespace left:expr whitespace operator:comparison_operator whitespace right:expr whitespace \\\")\\\" { return { type: 'function', function: 'probability', arguments: [{ type: 'comparison', left, operator, right }] } }\\n  / \\\"Pr(\\\" whitespace arg:expr whitespace \\\")\\\" { return { type: 'function', function: 'probability', arguments: [arg]}}\\n\\ninference\\n  = left:fact \\\":-\\\" whitespace right:clause { return { type: 'inference', left, right } }\\n\\nclause\\n  = conjunction\\n  / disjunction\\n  / \\\"(\\\" whitespace clause:clause whitespace \\\")\\\" { return clause }\\n  / comparison\\n  / fact\\n\\nconjunction\\n  = \\\"(\\\" first:clause \\\")\\\" whitespace rest:next_conjunction+ { return joinClauses('conjunction', first, rest) }\\n  / first:fact rest:next_conjunction+ { return joinClauses('conjunction', first, rest) }\\n\\ndisjunction\\n  = \\\"(\\\" first:fact \\\")\\\" whitespace rest:next_disjunction+ { return joinClauses('disjunction', first, rest) }\\n  / first:fact rest:next_disjunction+ { return joinClauses('disjunction', first, rest) }\\n\\nnext_conjunction\\n  = \\\"&\\\" whitespace clause:clause { return clause }\\n\\nnext_disjunction\\n  = \\\"|\\\" whitespace clause:clause { return clause }\\n\\nclaim\\n  = \\\"∴\\\" clause:clause { return { type: 'claim', clause: clause } }\\n\\nrolling\\n  = \\\"🎲\\\" clause:clause { return { type: 'rolling', clause: clause } }\\n\\ncomparison\\n  = whitespace \\\"(\\\" left:expr \\\")\\\" rest:next_comparison+ { return comparisonTree(left, rest) }\\n  / whitespace left:expr rest:next_comparison+ { return comparisonTree(left, rest) }\\n\\nnext_comparison\\n  = whitespace operator:comparison_operator whitespace expr:expr { return { operator, expr } }\\n\\ncomparison_operator\\n  = op:\\\"=\\\" { return op }\\n  / op:\\\"!=\\\" { return op }\\n  / op:\\\">=\\\" { return op }\\n  / op:\\\"<=\\\" { return op }\\n  / op:\\\">\\\" { return op }\\n  / op:\\\"<\\\" { return op }\\n\\ncomment\\n  = \\\"//\\\" comment:[^\\\\n]* { return { type: 'comment', value: comment.join('').trim() } }\\n  / \\\"/*\\\" comment:(!\\\"*/\\\" .)* \\\"*/\\\" { return { type: 'comment', value: comment.flat().join('').trim() }}\\n\\nstring\\n  = name:([A-Z][A-Za-z_]+) { return { type: 'string', value: name[0] + name[1].join('') } }\\n\\nvariable\\n  = name:([a-z_]+) { return { type: 'variable', value: name.join('') } }\\n  / \\\"?\\\" { return { type: 'variable', value: '?' } }\\n\\nroll\\n  = count:([0-9]+) \\\"d\\\" die:([0-9]+) modifier:([+-][0-9]+)? { return { type: 'roll', count: parseInt(count.join('')), die: parseInt(die.join('')), modifier: modifier ? parseInt(modifier.join('')) : 0 } }\\n\\nnumber\\n  = number:([-]?[0-9]+([.][0-9]+)?) { return { type: 'number', value: parseNumber(number) } }\\n\\nwhitespace\\n  = [ \\\\t\\\\r\\\\n]*\\n\";","export default \"// Auric has the Barbarian class\\nclass(Auric, Barbarian).\\n\\n// Auric has a Strength of 16\\nattribute(Auric, Strength, 16).\\n\\n// Auric has a Wisdom of 16\\nattribute(Auric, Wisdom, 9).\\n\\n// A character's bonus is half their attribute score minus ten\\nbonus(character, attr, floor((score-10)/2)) :- attribute(character, attr, score).\\n\\n// Therefore, Auric has a Strength bonus of 3\\n∴ bonus(Auric, Strength, 3).\\n\\n// Therefore, Auric has a Wisdom bonus of -1\\n∴ bonus(Auric, Wisdom, -1).\\n\\n// Full Plate has an armor bonus of 3\\narmor(FullPlate, 3).\\n\\n// Full Plate has a weight of 4\\nweight(FullPlate, 4).\\n\\n// Full Plate has the clumsy tag\\ntag(FullPlate, Clumsy).\\n\\n// A small shield\\nweight(RoundShield, 1).\\narmor(RoundShield, 1).\\n\\n// And a sword\\nweight(TwoHandedSword, 2).\\ndamage(TwoHandedSword, 1d8).\\ntag(TwoHandedSword, Close).\\n\\n// Given gear has a tag and the character is wearing the gear, add the tag to the character\\ntag(character, tag) :- (wearing(character, gear) | wielding(character, gear)) & tag(gear, tag).\\n\\n// Given a character, their armor is the sum of the armor of gear they are wearing/wielding\\narmor(character, sum(armor)) :- (wearing(character, gear) | wielding(character, gear)) & armor(gear, armor).\\n\\n// Given a character, their load is the sum of the weights of gear they are wearing and wielding\\nload(character, sum(weight)) :- (wearing(character, gear) | wielding(character, gear)) & weight(gear, weight).\\n\\n// The max load of a Barbarian is 8 plus their strength bonus\\nmax_load(character, 8+str) :- class(character, Barbarian) & bonus(character, Strength, str).\\n\\n// Give Auric his gear\\nwearing(Auric, FullPlate).\\nwielding(Auric, RoundShield).\\nwielding(Auric, TwoHandedSword).\\n\\n// So Auric is Clumsy, but he's got 4 armor a load of 7, and a max load of 11\\n∴ tag(Auric, Clumsy).\\n∴ armor(Auric, 4).\\n∴ load(Auric, 7).\\n∴ max_load(Auric, 11).\\n\\n? wielding(Auric, ?) | wearing(Auric, ?).\\n\\n// The move \\\"Full Plate and Packing Steel\\\" negates the Clumsy tag\\n~tag(character, Clumsy) :- move(character, FullPlateAndPackingSteel).\\n\\n// Auric has the move \\\"Full Plate and Packing Steel\\\"\\nmove(Auric, FullPlateAndPackingSteel).\\n\\n// Auric is not Clumsy\\n∴ ~tag(Auric, Clumsy).\\n\\n// Rolls and probability - work in progress\\nattack(Barbarian, 1d20+2).\\n\\n∴ attack(Barbarian, roll) & Pr(roll >= 15) = 0.4.\\n\\nenemy(Orc).\\narmor(Orc, 10).\\n\\nhit(character, weapon, enemy) :- class(character, class) & attack(class, roll) & wielding(character, weapon) & damage(weapon, ?) & enemy(enemy) & armor(enemy, armor) & roll >= armor.\\n\\n🎲 attack(Barbarian, ?) & enemy(Orc).\\n\\n∴ hit(Auric, TwoHandedSword, Orc).\\n\\n🎲 damage(TwoHandedSword, ?).\\n\\n∴ damage(TwoHandedSword, 7).\\n\\nmax_health(Orc, 10).\\n\\nhealth(character, max_health - sum(damage)) :- max_health(character, max_health) & hit(?, weapon, character) & damage(weapon, damage).\\n\\n∴ health(Orc, 3).\\n\";","import React, { useRef, useState } from 'react';\nimport styled from 'astroturf/react';\nimport Editor from \"@monaco-editor/react\";\n\nimport Interpreter, { Constant, expressionToString } from './entmoot';\nimport useMonacoEntish from './useMonacoEntish';\nimport dungeon_world from './dungeon_world.ent';\n\nconst Container = styled(\"div\")`\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n  width: 100vw;\n\n  select {\n    padding: 5px;\n    font-size: 0.875rem;\n    border: 0.0625rem solid #375EAB;\n    height: 30px;\n  }\n`;\n\nconst Navbar = styled(\"div\")`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  padding: 10px 16px 10px 16px;\n  background-color: #E0EBF5;\n\n  h1 {\n    margin-right: 16px;\n    font-size: 20px;\n    font-family: sans-serif;\n  }\n\n  * {\n    margin-top: 10px;\n    margin-bottom: 10px;\n    margin-right: 12px;\n    border-radius: 5px;\n    box-sizing: border-box;\n  }\n\n  button {\n    border: 1px solid #375EAB;\n    font-size: 16px;\n    font-family: sans-serif;\n    background: #375EAB;\n    color: white;\n    height: 30px;\n  }\n`;\n\nfunction Database({ interpreter }: { interpreter: Interpreter }) {\n  const [selectedTableName, setSelectedTableName] = useState<string | undefined>(undefined);\n  return <div style={{ margin: \"16px 24px\" }}>\n    {Object.keys(interpreter.tables).length > 0 &&\n      <select onChange={event => { setSelectedTableName(event.target.value) }}>\n        {Object.keys(interpreter.tables).map(table_name => <option\n          key={table_name} value={table_name}>\n          {table_name}\n        </option>)}\n      </select>\n    }\n    {selectedTableName &&\n      <Table name={selectedTableName} rows={interpreter.tables[selectedTableName]} />\n    }\n  </div >;\n}\n\nfunction Table({ name, rows }: { name: string, rows: Constant[][] }) {\n  return <table>\n    <tbody>\n      {rows.map((row, i) => <tr key={`${name}-${i}`}>\n        {row.map((val, j) => <td key={`${name}-${i}-${j}`}>\n          {expressionToString(val)}\n        </td>)}\n      </tr>)}\n    </tbody>\n  </table>;\n}\n\nfunction App() {\n  useMonacoEntish();\n  const examples: { [key: string]: string } = {\n    dungeon_world: dungeon_world,\n    clear: '',\n  };\n  const [interpreter, setInterpreter] = useState<Interpreter>(new Interpreter('seed'));\n  const [code, setCode] = useState<string>(examples.dungeon_world);\n  const [error, setError] = useState<string | undefined>(undefined);\n  const [log, setLog] = useState<string[]>([]);\n  const editorRef = useRef<any>(null);\n  const onExampleChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const example = examples[event.target.value];\n    setCode(example);\n    editorRef.current?.getModel().setValue(example);\n    setInterpreter(new Interpreter('seed'));\n  }\n  const run = () => {\n    const tmp = (console as any).log;\n    const newLog: string[] = [];\n    (console as any).log = (msg: string) => {\n      newLog.push(msg);\n    }\n    try {\n      interpreter.load(code);\n      setError(undefined);\n    } catch (e) {\n      setError(e.message);\n    }\n    (console as any).log = tmp;\n    setLog(newLog);\n    setInterpreter(interpreter);\n  }\n  return <Container>\n    <Navbar>\n      <h1>Entish Playground</h1>\n      <button onClick={run}>Run</button>\n      <select onChange={onExampleChange} defaultValue={\"dungeon_world\"}>\n        <option value=\"clear\">Clear</option>\n        <option value=\"dungeon_world\">Dungeon World</option>\n      </select>\n      <a href=\"//github.com/etherealmachine/entish#readme\">README</a>\n      <div style={{ marginLeft: \"auto\" }}>\n        <span><a href=\"//github.com/etherealmachine\">James Pettit</a> ©2021</span>\n      </div>\n    </Navbar>\n    <div style={{ height: \"calc(100vh - 70px)\" }}>\n      <div style={{ height: \"60%\" }}>\n        <Editor\n          defaultLanguage=\"entish\"\n          defaultValue={code}\n          onChange={value => { if (value) setCode(value) }}\n          options={{ minimap: { enabled: false }, scrollBeyondLastLine: false, scrollbar: { alwaysConsumeMouseWheel: false } }}\n          onMount={editor => { editorRef.current = editor; editor.layout(); }}\n        />\n      </div>\n      <div style={{ height: \"40%\", display: \"flex\", justifyContent: \"flex-start\" }}>\n        <div style={{ height: \"100%\", overflow: \"scroll\" }}>\n          <p style={{ color: \"#900\" }}>{error}</p>\n          <div>\n            {log.map((msg, i) => <p key={`log-msg-${i}`}>{msg}</p>)}\n          </div>\n        </div>\n        <Database interpreter={interpreter} />\n      </div>\n    </div>\n  </Container>;\n}\n\nexport default App;\n","import { useMonaco } from \"@monaco-editor/react\";\n\nexport default function useMonacoEntish() {\n\tconst monaco = useMonaco();\n\tif (monaco) {\n\t\tmonaco.languages.register({ id: 'entish' });\n\n\t\t// Register a tokens provider for the language\n\t\tmonaco.languages.setMonarchTokensProvider('entish', {\n\t\t\tdefaultToken: 'invalid',\n\t\t\tkeywords: [],\n\t\t\tbrackets: [\n\t\t\t\t{ open: '(', close: ')', token: 'delimiter.parenthesis' }\n\t\t\t],\n\t\t\ttokenizer: {\n\t\t\t\troot: [\n\t\t\t\t\t[/∴|:-|\\.|^\\?/, 'keyword'],\n\t\t\t\t\t[/\\/\\/.*$/, 'comment'],\n\t\t\t\t\t[/[A-Z][a-z]*/, 'constant'],\n\t\t\t\t\t[/[0-9]+d[0-9]+([+-][0-9]+)?/, 'constant'],\n\t\t\t\t\t[/\\d+/, 'number'],\n\t\t\t\t\t[/[()]/, '@brackets'],\n\t\t\t\t\t[/([a-z_]+)\\(/, 'identifier'],\n\t\t\t\t\t[/[a-z_]+|\\?/, 'variable.name'],\n\t\t\t\t\t[/[,]/, 'delimiter'],\n\t\t\t\t\t[/~|=|>|<|!=|>=|<=|\\*|\\/|\\+|-|\\^|&|\\|/, 'operators'],\n\t\t\t\t\t[/[ \\t\\r\\n]+/, ''],\n\t\t\t\t],\n\t\t\t},\n\t\t});\n\t}\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}